<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>รายการตรวจเลือด - UPaM Lab</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <style>
    * {
      margin: 0; padding: 0; box-sizing: border-box;
    }
    body {
      font-family: 'Inter', sans-serif;
      background: #f8fafc;
      min-height: 100vh;
      font-size: 14px;
    }

    /* Header */
    .header {
      background: white;
      padding: 12px 24px;
      box-shadow: 0 5px 10px rgba(0, 0, 0, 0.477);
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 100;
      background: linear-gradient(135deg, #ffff 0%, #183ccbba 100%);
    }

    .logo {
      display: flex;
      align-items: center;
    }

    .logo-img {
      width: 60px;
      height: 60px;
      margin-right: 10px;
    }

    .phone-number {
      color: #6B7280;
      font-size: 16px;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .header-right {
      display: flex;
      align-items: center;
      gap: 20px;
    }

    .staff-info {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      color: #374151;
    }

    .staff-name {
      font-weight: 600;
      font-size: 14px;
    }

    .staff-role {
      font-size: 12px;
      color: #6B7280;
    }

    .header-icons {
      display: flex;
      gap: 8px;
    }

    .icon-btn {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: #F3F4F6;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s ease;
      color: #6B7280;
    }

    .icon-btn:hover {
      background: #E5E7EB;
      transform: translateY(-1px);
    }

    .notification-btn {
      position: relative;
    }

    .notification-btn::after {
      content: '';
      position: absolute;
      top: 6px;
      right: 6px;
      width: 8px;
      height: 8px;
      background: #EF4444;
      border-radius: 50%;
      border: 2px solid white;
    }

        /* Profile Dropdown Styles */
        .profile-dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: white;
            min-width: 180px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.15);
            z-index: 1000;
            border-radius: 12px;
            overflow: hidden;
            border: 1px solid #e5e7eb;
            margin-top: 8px;
        }

        .dropdown-content.show {
            display: block;
            animation: dropdownFadeIn 0.3s ease-out;
        }

        @keyframes dropdownFadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .dropdown-item {
            color: #374151;
            padding: 12px 20px;
            text-decoration: none;
            display: block;
            transition: all 0.3s ease;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            font-size: 14px;
            cursor: pointer;
        }

        .dropdown-item:hover {
            background-color: #f9fafb;
            color: #1f2937;
        }

        .dropdown-item i {
            margin-right: 10px;
            width: 16px;
            color: #6b7280;
        }

        .dropdown-item.logout {
            border-top: 1px solid #e5e7eb;
            color: #dc2626;
        }

        .dropdown-item.logout:hover {
            background-color: #fef2f2;
            color: #dc2626;
        }

        .dropdown-item.logout i {
            color: #dc2626;
        }
    /* Container */
    .container {
      max-width: 1200px;
      margin: 40px auto;
      padding: 0 20px;
    }

    .page-title {
      text-align: center;
      font-size: 48px;
      color: #3B82F6;
      font-weight: 600;
      margin-bottom: 10px;
    }

    .subtitle {
      text-align: center;
      color: #6B7280;
      font-size: 18px;
      margin-bottom: 40px;
    }

    /* Search and Filter Section */
    .filter-section {
      background: white;
      border-radius: 16px;
      padding: 24px;
      margin-bottom: 24px;
      box-shadow: 0 4px 16px rgba(0,0,0,0.08);
    }

    .filter-row {
      display: flex;
      gap: 20px;
      align-items: center;
      flex-wrap: wrap;
    }

    .search-input {
      flex: 1;
      min-width: 300px;
      padding: 12px 16px;
      border: 2px solid #E5E7EB;
      border-radius: 8px;
      font-size: 16px;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="gray"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/></svg>') no-repeat right 12px center;
      background-size: 20px;
      padding-right: 40px;
    }

    .search-input:focus {
      outline: none;
      border-color: #3B82F6;
    }

    .date-filter {
      padding: 12px 16px;
      border: 2px solid #E5E7EB;
      border-radius: 8px;
      font-size: 16px;
      background: white;
      cursor: pointer;
    }

    .date-filter:focus {
      outline: none;
      border-color: #3B82F6;
    }

    /* Status Tabs */
    .status-tabs {
      display: flex;
      gap: 8px;
      margin-bottom: 24px;
      background: white;
      padding: 8px;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .status-tab {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      background: transparent;
      color: #6B7280;
      position: relative;
    }

    .status-tab.active {
      background: #3B82F6;
      color: white;
    }

    .status-tab:hover:not(.active) {
      background: #F3F4F6;
      color: #374151;
    }

    .status-count {
      background: #EF4444;
      color: white;
      border-radius: 12px;
      padding: 2px 8px;
      font-size: 12px;
      font-weight: 600;
      margin-left: 8px;
    }

    .status-tab.active .status-count {
      background: rgba(255,255,255,0.3);
    }

    /* Test Cards */
    .test-list {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }

    .test-card {
      background: white;
      border-radius: 16px;
      padding: 24px;
      box-shadow: 0 4px 16px rgba(0,0,0,0.08);
      border-left: 4px solid #10B981;
      transition: all 0.2s ease;
      cursor: pointer;
    }

    .test-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    }

    .test-card.completed {
      border-left-color: #6B7280;
      opacity: 0.8;
    }

    .test-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 16px;
    }

    .test-id {
      font-size: 18px;
      font-weight: 700;
      color: #1F2937;
    }

    .test-status {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 600;
    }

    .status-today {
      background: #DBEAFE;
      color: #1E40AF;
    }

    .status-completed {
      background: #D1FAE5;
      color: #065F46;
    }

    .status-past {
      background: #F3F4F6;
      color: #6B7280;
    }

    .test-info {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 16px;
      margin-bottom: 16px;
    }

    .info-item {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }

    .info-label {
      font-size: 14px;
      color: #6B7280;
      font-weight: 500;
    }

    .info-value {
      font-size: 16px;
      color: #1F2937;
      font-weight: 500;
    }

    .price-value {
      color: #EF4444;
      font-weight: 700;
    }

    .test-actions {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
      margin-top: 16px;
      padding-top: 16px;
      border-top: 1px solid #E5E7EB;
    }

    .btn {
      padding: 8px 16px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      display: inline-flex;
      align-items: center;
      gap: 6px;
    }

    .btn-view {
      background: #F3F4F6;
      color: #374151;
      border: 1px solid #E5E7EB;
    }

    .btn-view:hover {
      background: #E5E7EB;
    }

    .btn-upload {
      background: #3B82F6;
      color: white;
    }

    .btn-upload:hover {
      background: #2563EB;
    }

    .btn-download {
      background: #10B981;
      color: white;
    }

    .btn-download:hover {
      background: #059669;
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    /* Results Display */
    .results-table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      background: white;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .results-table th,
    .results-table td {
      padding: 12px 16px;
      text-align: left;
      border-bottom: 1px solid #E5E7EB;
    }

    .results-table th {
      background: #F8FAFC;
      font-weight: 600;
      color: #374151;
    }

    .results-table tr:hover {
      background: #F9FAFB;
    }

    .abnormal-value {
      color: #EF4444;
      font-weight: 600;
    }

    .normal-value {
      color: #059669;
    }

    .results-summary {
      background: #EFF6FF;
      border: 1px solid #DBEAFE;
      border-radius: 8px;
      padding: 16px;
      margin: 16px 0;
    }

    .summary-title {
      font-size: 16px;
      font-weight: 600;
      color: #1E40AF;
      margin-bottom: 8px;
    }

    .summary-content {
      color: #374151;
      line-height: 1.5;
    }

    /* Detail Modal */
    .detail-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
    }

    .detail-modal.show {
      display: flex;
    }

    .modal-content {
      background: white;
      border-radius: 16px;
      padding: 32px;
      max-width: 800px;
      width: 90%;
      max-height: 90vh;
      overflow-y: auto;
      box-shadow: 0 20px 40px rgba(0,0,0,0.2);
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
      padding-bottom: 16px;
      border-bottom: 2px solid #E5E7EB;
    }

    .modal-title {
      font-size: 24px;
      font-weight: 700;
      color: #1F2937;
    }

    .close-btn {
      background: none;
      border: none;
      font-size: 24px;
      color: #6B7280;
      cursor: pointer;
      padding: 4px;
      border-radius: 4px;
      transition: all 0.2s ease;
    }

    .close-btn:hover {
      background: #F3F4F6;
      color: #374151;
    }

    .detail-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-bottom: 24px;
    }

    .detail-item {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }

    .detail-label {
      font-size: 14px;
      color: #6B7280;
      font-weight: 500;
    }

    .detail-value {
      font-size: 16px;
      color: #1F2937;
      font-weight: 500;
    }

    .modal-actions {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
      margin-top: 24px;
      padding-top: 16px;
      border-top: 1px solid #E5E7EB;
    }

    /* Upload Modal */
    .upload-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1001;
      justify-content: center;
      align-items: center;
    }

    .upload-modal.show {
      display: flex;
    }

    .upload-modal-content {
      background: white;
      border-radius: 16px;
      padding: 32px;
      max-width: 500px;
      width: 90%;
      box-shadow: 0 20px 40px rgba(0,0,0,0.2);
    }

    .upload-modal-title {
      font-size: 20px;
      font-weight: 600;
      color: #1F2937;
      margin-bottom: 20px;
      text-align: center;
    }

    .file-upload-area {
      border: 2px dashed #D1D5DB;
      border-radius: 12px;
      padding: 40px 20px;
      text-align: center;
      margin-bottom: 20px;
      transition: all 0.2s ease;
      cursor: pointer;
    }

    .file-upload-area:hover {
      border-color: #3B82F6;
      background: #F8FAFC;
    }

    .file-upload-area.dragover {
      border-color: #3B82F6;
      background: #EFF6FF;
    }

    .upload-icon {
      font-size: 48px;
      color: #9CA3AF;
      margin-bottom: 16px;
    }

    .upload-text {
      font-size: 16px;
      color: #374151;
      margin-bottom: 8px;
    }

    .upload-subtext {
      font-size: 14px;
      color: #6B7280;
    }

    .file-input {
      display: none;
    }

    .selected-file {
      background: #EFF6FF;
      padding: 12px 16px;
      border-radius: 8px;
      margin: 12px 0;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .file-name {
      flex: 1;
      font-weight: 500;
      color: #1F2937;
    }

    .remove-file {
      background: none;
      border: none;
      color: #EF4444;
      cursor: pointer;
      font-size: 18px;
      padding: 4px;
      border-radius: 4px;
    }

    .remove-file:hover {
      background: #FEE2E2;
    }

    .upload-modal-actions {
      display: flex;
      gap: 12px;
      justify-content: center;
    }

    .btn-modal {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn-modal-primary {
      background: #3B82F6;
      color: white;
    }

    .btn-modal-primary:hover {
      background: #2563EB;
    }

    .btn-modal-secondary {
      background: #F3F4F6;
      color: #374151;
    }

    .btn-modal-secondary:hover {
      background: #E5E7EB;
    }

    /* Success Modal */
    .success-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1002;
      justify-content: center;
      align-items: center;
    }

    .success-modal.show {
      display: flex;
    }

    .success-modal-content {
      background: white;
      border-radius: 16px;
      padding: 40px;
      max-width: 400px;
      width: 90%;
      text-align: center;
      box-shadow: 0 20px 40px rgba(0,0,0,0.2);
    }

    .success-icon {
      width: 80px;
      height: 80px;
      background: #10B981;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 20px;
      color: white;
      font-size: 36px;
    }

    .success-title {
      font-size: 24px;
      font-weight: 600;
      color: #1F2937;
      margin-bottom: 10px;
    }

    .success-message {
      font-size: 16px;
      color: #6B7280;
      margin-bottom: 24px;
      line-height: 1.5;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #6B7280;
    }

    .empty-icon {
      font-size: 48px;
      margin-bottom: 16px;
      color: #D1D5DB;
    }

    .empty-title {
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 8px;
    }

    .empty-message {
      font-size: 16px;
    }

    .btn.loading {
      pointer-events: none;
      opacity: 0.7;
    }
    /* Loading */
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }

    .btn.loading::after {
      content: "";
      width: 14px;
      height: 14px;
      margin-left: 6px;
      border: 2px solid transparent;
      border-top: 2px solid currentColor;
      border-radius: 50%;
      display: inline-block;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Responsive */
    @media (max-width: 768px) {
      .container {
        padding: 0 16px;
      }

      .page-title {
        font-size: 32px;
      }

      .filter-row {
        flex-direction: column;
      }

      .search-input {
        min-width: 100%;
      }

      .test-info {
        grid-template-columns: 1fr;
      }

      .test-actions {
        flex-wrap: wrap;
      }

      .detail-grid {
        grid-template-columns: 1fr;
      }

      .status-tabs {
        overflow-x: auto;
        padding: 8px;
      }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <div class="header">
    <div class="logo">
      <img src="/public/img/UPaMLOGO.png" class="logo-img"> 
      <div class="phone-number">
        <i class="fas fa-phone"></i>
        1234
      </div>
    </div>
    
    <div class="header-right">
      <div class="staff-info">
        <div class="staff-name">นพ. สมชาย วิทยากร</div>
        <div class="staff-role">เจ้าหน้าที่ห้องปฏิบัติการ</div>
      </div>
            <div class="header-icons">
                <button class="icon-btn" title="ค้นหา">
                    <i class="fas fa-search"></i>
                </button>
                <button class="icon-btn notification-btn" title="การแจ้งเตือน">
                    <i class="fas fa-bell"></i>
                </button>

                <a href="/Login">
                    <button class="icon-btn" title="บัญชีผู้ใช้">
                        <i class="fas fa-user"></i>
                    </button>
                </a>

                <div class="profile-dropdown">
                    <button class="icon-btn" id="profileBtn" title="บัญชีผู้ใช้">
                        <i class="fa-solid fa-right-to-bracket"></i>
                    </button>
                    <div class="dropdown-content" id="profileDropdown">
                        <button class="dropdown-item logout" onclick="logout()">
                            <i class="fas fa-sign-out-alt"></i>
                            ออกจากระบบ
                        </button>
                    </div>
                </div>

            </div>
        </div>
    </div>

  <!-- Main Content -->
  <div class="container">
    <h1 class="page-title">ห้องปฏิบัติการตรวจเลือด</h1>
    <p class="subtitle">ระบบจัดการผลตรวจเลือดและอัปโหลดไฟล์ Excel</p>

    <!-- Filter Section -->
    <div class="filter-section">
      <div class="filter-row">
        <input type="text" class="search-input" placeholder="ค้นหาด้วยรหัสตรวจ หรือ ชื่อผู้ป่วย..." id="searchInput">
        <input type="date" class="date-filter" id="dateFilter">
      </div>
    </div>

    <!-- Status Tabs -->
    <div class="status-tabs">
      <button class="status-tab active" data-status="today" onclick="switchTab('today')">
        วันนี้ <span class="status-count" id="todayCount">0</span>
      </button>
      <button class="status-tab" data-status="completed" onclick="switchTab('completed')">
        ที่อัปโหลดแล้ว <span class="status-count" id="completedCount">0</span>
      </button>
      <button class="status-tab" data-status="history" onclick="switchTab('history')">
        ประวัติ <span class="status-count" id="historyCount">0</span>
      </button>
    </div>

    <!-- Test List -->
    <div class="test-list" id="testList">
      <!-- Tests will be populated here -->
    </div>
  </div>
  
  </table>
  <!-- Detail Modal -->
  <div class="detail-modal" id="detailModal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">รายละเอียดผลตรวจเลือด</h3>
        <button class="close-btn" onclick="closeDetailModal()">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="detail-grid">
        <div class="detail-item">
          <div class="detail-label">รหัสตรวจ</div>
          <div class="detail-value" id="modalTestId">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">ชื่อ-นามสกุล</div>
          <div class="detail-value" id="modalPatientName">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">ประเภทการตรวจ</div>
          <div class="detail-value" id="modalTestType">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">วันที่ตรวจ</div>
          <div class="detail-value" id="modalDate">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">เวลา</div>
          <div class="detail-value" id="modalTime">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">ค่าบริการ</div>
          <div class="detail-value price-value" id="modalPrice">-</div>
        </div>
      </div>

      <!-- Results Section -->
      <div id="resultsSection" style="display: none;">
        <div class="results-summary" id="resultsSummary"></div>
        <div id="resultsTableContainer"></div>
      </div>
      
      <div class="modal-actions" id="modalActions">
        <!-- Actions will be populated based on status -->
      </div>
    </div>
  </div>

  <div class="container">
  <!-- ...ส่วนอื่นๆ... -->


    <div class="test-list" id="testList">
      <!-- Tests will be populated here -->
    </div>
  </div>

  <div id="uploadModal" class="upload-modal">
    <div class="upload-modal-content">
      <h2 class="upload-modal-title">อัปโหลดผลตรวจ</h2>
      <div id="fileUploadArea" class="file-upload-area">
        <input type="file" id="fileInput" class="file-input" accept=".xlsx,.xls" onchange="handleFileSelect(event)">
        <label for="fileInput" class="btn">เลือกไฟล์</label>
      </div>
      <div id="selectedFile" class="selected-file" style="display: none;">
        <span id="fileName" class="file-name"></span>
        <button class="remove-file" onclick="removeFile()">ลบ</button>
      </div>
      <div class="upload-modal-actions">
        <button id="uploadBtn" class="btn-modal btn-modal-primary" onclick="uploadFile()" disabled>อัปโหลด</button>
        <button class="btn-modal btn-modal-secondary" onclick="closeUploadModal()">ยกเลิก</button>
      </div>
    </div>
  </div>


  <!-- Success Modal -->
  <div class="success-modal" id="successModal">
    <div class="success-modal-content">
      <div class="success-icon">
        <i class="fas fa-check"></i>
      </div>
      <h3 class="success-title">อัปโหลดสำเร็จ!</h3>
      <p class="success-message" id="successMessage">
        ผลตรวจเลือดได้ถูกอัปโหลดเรียบร้อยแล้ว
      </p>
      <button class="btn-modal btn-modal-primary" onclick="closeSuccessModal()">
        ตกลง
      </button>
    </div>
  </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <script>
    let currentTab = 'today';
    let currentTestId = null;
    let selectedFile = null;
    let bloodTests = [];

    const profileBtn = document.getElementById('profileBtn');
    const profileDropdown = document.getElementById('profileDropdown');

        profileBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            profileDropdown.classList.toggle('show');
        });

        // ปิด dropdown เมื่อคลิกข้างนอก
        window.addEventListener('click', function() {
            if (profileDropdown.classList.contains('show')) {
                profileDropdown.classList.remove('show');
            }
        });

        // ป้องกันการปิด dropdown เมื่อคลิกข้างใน dropdown
        profileDropdown.addEventListener('click', function(e) {
            e.stopPropagation();
        });

        // ฟังก์ชัน logout
        function logout() {
            if (confirm('คุณต้องการออกจากระบบหรือไม่?')) {
                // เพิ่ม loading effect
                const logoutBtn = event.target;
                logoutBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> กำลังออกจากระบบ...';
                
                setTimeout(() => {
                    alert('ออกจากระบบเรียบร้อยแล้ว');
                     window.location.href = "/Login";
                }, 1500);
            }
        }

    async function loadBloodTests() {
      const res = await fetch('/api/lab/Staffblood');
      bloodTests = await res.json();
      renderTests();
      updateCounts();
      renderAppointments(bloodTests); // <-- เพิ่มบรรทัดนี้
      initializePage();
    }

    window.addEventListener('DOMContentLoaded', loadBloodTests);
    // Profile dropdown functionality
    function bookService(service, event) {
      const card = event.currentTarget;
      card.style.transform = 'scale(0.95)';
      setTimeout(() => {
        card.style.transform = '';
        const url = service === 'physiotherapy' ? "/Bookingphy" : "/Bookingblood";
        alert(`กำลังจองคิว ${service === 'physiotherapy' ? 'กายภาพบำบัด' : 'ตรวจเลือด'} กรุณารอสักครู่...`);
        setTimeout(() => window.location.href = url, 800);
      }, 150);
    }

    function openLabTestSystem() {
      alert('กำลังไปที่ระบบดูผลตรวจเลือด...');
      setTimeout(() => window.location.href = "/lab-tests", 800);
    }

        function openLabTestSystem() {
          alert('กำลังไปที่ระบบดูผลตรวจเลือด...');
          setTimeout(() => {
              window.location.href = "/lab-tests";
          }, 800);
        }

        // Header button interactions (ยกเว้น profile button ที่มี dropdown)
        document.querySelectorAll('.icon-btn:not(#profileBtn)').forEach(btn => {
          btn.addEventListener('click', function() {
              console.log('Clicked:', this.title || 'Header button');
              this.style.transform = 'scale(0.9)';
              setTimeout(() => {
                  this.style.transform = '';
              }, 150);
          });
        });
    // Lab test reference data based on the document
    function renderAppointments(list) {
      const tbody = document.getElementById('appointmentsBody');
      tbody.innerHTML = "";
      list.forEach(appt => {
        // Services
        let servicesText = '';
        try {
          const arr = JSON.parse(appt.services);
          servicesText = Array.isArray(arr) ? arr.join(', ') : appt.services;
        } catch {
          servicesText = Array.isArray(appt.services) ? appt.services.join(', ') : appt.services;
        }

        // ตรวจสอบว่ามีผลตรวจหรือยัง
        const hasResults = Array.isArray(appt.results)
          ? appt.results.length > 0
          : !!appt.results;

        let actions = `<button class="detail-btn" data-id="${appt.id}">รายละเอียด</button>`;
        if (appt.status === 'จองแล้ว' && !hasResults) {
          actions += `<button class="upload-btn" data-id="${appt.id}">อัปโหลดผล</button>`;
        }
        if (hasResults) {
          actions += `<button class="download-btn" data-id="${appt.id}">ดาวน์โหลด</button>`;
        }

        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${appt.id}</td>
          <td>${servicesText}</td>
          <td>${appt.price}</td>
          <td>${appt.date}</td>
          <td>${appt.time}</td>
          <td>${appt.status}</td>
          <td>${actions}</td>
        `;
        tbody.appendChild(tr);
      });

      // bind ปุ่มรายละเอียด
      document.querySelectorAll('.detail-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const apptId = btn.dataset.id;
          openDetailModal(apptId);
        });
      });

      // bind ปุ่มอัปโหลดผล
      document.querySelectorAll('.upload-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const testId = btn.dataset.id;
          openUploadModal(testId);
        });
      });

      // bind ปุ่มดาวน์โหลด
      document.querySelectorAll('.download-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const testId = btn.dataset.id;
          downloadResult(testId);
        });
      });
    }
    // Initialize page
    function initializePage() {
      setTodayDate();
      renderTests();
      updateCounts();
      setupEventListeners();
    }

    // Set today's date as default
    function setTodayDate() {
      const today = new Date();
      const dateString = today.toISOString().split('T')[0];
      document.getElementById('dateFilter').value = dateString;
    }

    // Setup event listeners
    function setupEventListeners() {
      document.getElementById('searchInput').addEventListener('input', handleSearch);
      document.getElementById('dateFilter').addEventListener('change', handleDateFilter);
      
      // Modal event listeners
      document.getElementById('detailModal').addEventListener('click', function(e) {
        if (e.target === this) closeDetailModal();
      });
      
      document.getElementById('uploadModal').addEventListener('click', function(e) {
        if (e.target === this) closeUploadModal();
      });
      
      document.getElementById('successModal').addEventListener('click', function(e) {
        if (e.target === this) closeSuccessModal();
      });
      
      // File upload drag and drop
      const uploadArea = document.getElementById('fileUploadArea');
      
      uploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        uploadArea.classList.add('dragover');
      });
      
      uploadArea.addEventListener('dragleave', function(e) {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
      });
      
      uploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          handleFileSelect({ target: { files: files } });
        }
      });
      
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          closeDetailModal();
          closeUploadModal();
          closeSuccessModal();
        }
      });
    }

    // Switch between tabs
    function switchTab(status) {
      currentTab = status;
      document.querySelectorAll('.status-tab').forEach(tab => tab.classList.remove('active'));
      document.querySelector(`[data-status="${status}"]`).classList.add('active');
      renderTests();
    }

    // Render tests based on current tab
    function renderTests(filtered = null) {
      const testList = document.getElementById('testList');
      let list = filtered || bloodTests.filter(t => t.status === currentTab);

      if (currentTab === 'today') {
        const today = new Date();
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const yyyy = today.getFullYear();
        const todayStr = `${dd}/${mm}/${yyyy}`;
        // แสดงเฉพาะรายการที่ "วันที่" ตรงกับวันนี้ และ status เป็น "จองแล้ว"
        list = bloodTests.filter(t => t.date === todayStr && t.status === 'จองแล้ว');
      } else {
        list = bloodTests.filter(t => t.status === currentTab);
      }

      if (!list.length) {
        testList.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon"><i class="fas fa-vial"></i></div>
            <div class="empty-title">ไม่มีรายการในสถานะนี้</div>
            <div class="empty-message">ยังไม่มีรายการตรวจเลือดที่ต้องจัดการ</div>
          </div>`;
        return;
      }

      let html = '';
        list.forEach(test => {
          const statusClass = test.status === 'today' ? 'status-today' : 
                            test.status === 'completed' ? 'status-completed' : 'status-past';
          const statusText = test.status === 'today' ? 'วันนี้' : 
                            test.status === 'completed' ? 'อัปโหลดแล้ว' : 'ประวัติ';
          
          html += `
            <div class="test-card ${test.status}" onclick="openDetailModal('${test.id}')">
              <div class="test-header">
                <div class="test-id">รหัส ${test.id}</div>
                <div class="test-status ${statusClass}">${statusText}</div>
              </div>
              
              <div class="test-info">
                <div class="info-item">
                  <div class="info-label">ชื่อผู้ป่วย</div>
                  <div class="info-value">${test.patientName}</div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">ประเภทการตรวจ</div>
                  <div class="info-value">${test.testType}</div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">วันที่</div>
                  <div class="info-value">${test.date}</div>
                </div>
                
                <div class="info-item">
                  <div class="info-label">เวลา</div>
                  <div class="info-value">${test.time} น.</div>
                </div>
                
                <div class="info-item">
                <div class="info-label">ค่าบริการ</div>
                <div class="info-value price-value">${test.price} บาท</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">เจ้าหน้าที่</div>
                <div class="info-value">${test.labStaff}</div>
              </div>
            </div>
            
            <div class="test-actions" onclick="event.stopPropagation()">
              <button class="btn btn-view" onclick="openDetailModal('${test.id}')">
                <i class="fas fa-eye"></i> ดูรายละเอียด
              </button>
              
              ${!(
                Array.isArray(test.results)
                  ? test.results.length > 0
                  : !!test.results
              ) ? `
                <button class="btn btn-upload" onclick="openUploadModal('${test.id}')">
                  <i class="fas fa-upload"></i> อัปโหลดผล
                </button>
              ` : `
                <button class="btn btn-download" onclick="downloadResult('${test.id}')">
                  <i class="fas fa-download"></i> ดาวน์โหลด
                </button>
              `}
            </div>
          </div>
          `;
        });
        
        testList.innerHTML = html;
    }

    // Update counts for each tab
    function updateCounts() {
      const completedCount = bloodTests.filter(b => b.status === 'completed').length;
      const historyCount = bloodTests.filter(b => b.status === 'history').length;
      const today = new Date();
      const dd = String(today.getDate()).padStart(2, '0');
      const mm = String(today.getMonth() + 1).padStart(2, '0');
      const yyyy = today.getFullYear();
      const todayStr = `${dd}/${mm}/${yyyy}`;
      const todayCount = bloodTests.filter(b => b.date === todayStr && b.status === 'จองแล้ว').length;
      
      document.getElementById('todayCount').textContent = todayCount;
      document.getElementById('completedCount').textContent = completedCount;
      document.getElementById('historyCount').textContent = historyCount;
    }

    // Search functionality
    function handleSearch() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const dateFilter = document.getElementById('dateFilter').value;
      
      let filteredTests = bloodTests.filter(test => test.status === currentTab);
      
      if (searchTerm) {
        filteredTests = filteredTests.filter(test => 
          test.id.toLowerCase().includes(searchTerm) ||
          test.patientName.toLowerCase().includes(searchTerm)
        );
      }
      
      if (dateFilter) {
        const filterDate = new Date(dateFilter);
        filteredTests = filteredTests.filter(test => {
          const testDate = parseThaiDate(test.date);
          return testDate.toDateString() === filterDate.toDateString();
        });
      }
      
      renderFilteredTests(filteredTests);
    }

    function handleDateFilter() {
      handleSearch();
    }

    function parseThaiDate(dateStr) {
      const [day, month, year] = dateStr.split('/');
      return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
    }

    function renderFilteredTests(filteredTests) {
      const testList = document.getElementById('testList');
      
      if (filteredTests.length === 0) {
        testList.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">
              <i class="fas fa-search"></i>
            </div>
            <div class="empty-title">ไม่พบรายการที่ค้นหา</div>
            <div class="empty-message">ลองเปลี่ยนคำค้นหาหรือกรองข้อมูลใหม่</div>
          </div>
        `;
        return;
      }

      let html = '';
      filteredTests.forEach(test => {
        const statusClass = test.status === 'today' ? 'status-today' : 
                           test.status === 'completed' ? 'status-completed' : 'status-past';
        const statusText = test.status === 'today' ? 'วันนี้' : 
                          test.status === 'completed' ? 'อัปโหลดแล้ว' : 'ประวัติ';
        
        html += `
          <div class="test-card ${test.status}" onclick="openDetailModal('${test.id}')">
            <div class="test-header">
              <div class="test-id">รหัส ${test.id}</div>
              <div class="test-status ${statusClass}">${statusText}</div>
            </div>
            
            <div class="test-info">
              <div class="info-item">
                <div class="info-label">ชื่อผู้ป่วย</div>
                <div class="info-value">${test.patientName}</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">ประเภทการตรวจ</div>
                <div class="info-value">${test.testType}</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">วันที่</div>
                <div class="info-value">${test.date}</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">เวลา</div>
                <div class="info-value">${test.time} น.</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">ค่าบริการ</div>
                <div class="info-value price-value">${test.price} บาท</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">เจ้าหน้าที่</div>
                <div class="info-value">${test.labStaff}</div>
              </div>
            </div>
            
            <div class="test-actions" onclick="event.stopPropagation()">
              <button class="btn btn-view" onclick="openDetailModal('${test.id}')">
                <i class="fas fa-eye"></i> ดูรายละเอียด
              </button>
              
              ${test.status === 'จองแล้ว' && !test.results ? `
                <button class="btn btn-upload" onclick="openUploadModal('${test.id}')">
                  <i class="fas fa-upload"></i> อัปโหลดผล
                </button>
              ` : test.results ? `
                <button class="btn btn-download" onclick="downloadResult('${test.id}')">
                  <i class="fas fa-download"></i> ดาวน์โหลด
                </button>
              ` : ''}
            </div>
          </div>
        `;
      });
      
      testList.innerHTML = html;
    }

    // Modal functions
    function openDetailModal(testId) {
      const test = bloodTests.find(b => b.id === testId);
      if (!test) return;
      
      currentTestId = testId;
      
      document.getElementById('modalTestId').textContent = test.id;
      document.getElementById('modalPatientName').textContent = test.patientName;
      document.getElementById('modalTestType').textContent = test.testType;
      document.getElementById('modalDate').textContent = test.date;
      document.getElementById('modalTime').textContent = test.time + ' น.';
      document.getElementById('modalPrice').textContent = test.price + ' บาท';
      
      // Show results if available
      const resultsSection = document.getElementById('resultsSection');
      if (test.results && test.results.length > 0) {
        displayTestResults(test.results);
        resultsSection.style.display = 'block';
      } else {
        resultsSection.style.display = 'none';
      }
      
      // Update modal actions based on status
      const modalActions = document.getElementById('modalActions');
      if (test.status === 'today' && !test.results) {
        modalActions.innerHTML = `
          <button class="btn btn-upload" onclick="openUploadModal('${test.id}')">
            <i class="fas fa-upload"></i> อัปโหลดผลตรวจ
          </button>
          <button class="btn btn-view" onclick="closeDetailModal()">
            <i class="fas fa-times"></i> ปิด
          </button>
        `;
      } else if (test.results) {
        modalActions.innerHTML = `
          <button class="btn btn-download" onclick="downloadResult('${test.id}')">
            <i class="fas fa-download"></i> ดาวน์โหลดไฟล์ Excel
          </button>
          <button class="btn btn-view" onclick="closeDetailModal()">
            <i class="fas fa-times"></i> ปิด
          </button>
        `;
      } else {
        modalActions.innerHTML = `
          <button class="btn btn-view" onclick="closeDetailModal()">
            <i class="fas fa-times"></i> ปิด
          </button>
        `;
      }
      
      document.getElementById('detailModal').classList.add('show');
      console.log('✅ Detail modal opened for test:', test.id);
    }
    
    function testUploadModal() {
      console.log('🧪 Testing upload modal with sample test ID');
      openUploadModal('BT001');
    }

    function displayTestResults(excelData) {
      // Display summary
      const summaryDiv = document.getElementById('resultsSummary');
      const abnormalCount = excelData.filter(item => item.status !== 'ปกติ').length;
      
      summaryDiv.innerHTML = `
        <div class="summary-title">สรุปผลตรวจ</div>
        <div class="summary-content">
          จำนวนรายการตรวจ: ${excelData.length} รายการ<br>
          ผลปกติ: ${excelData.length - abnormalCount} รายการ<br>
          ผลผิดปกติ: ${abnormalCount} รายการ
        </div>
      `;
      
      // Display detailed results table
      const tableContainer = document.getElementById('resultsTableContainer');
      let tableHtml = `
        <table class="results-table">
          <thead>
            <tr>
              <th>รายการตรวจ</th>
              <th>ค่าที่วัดได้</th>
              <th>หน่วย</th>
              <th>ค่าปกติ</th>
              <th>สถานะ</th>
            </tr>
          </thead>
          <tbody>
      `;
      
      excelData.forEach(item => {
        const statusClass = item.status === 'ปกติ' ? 'normal-value' : 'abnormal-value';
        tableHtml += `
          <tr>
            <td>${item.test}</td>
            <td class="${statusClass}">${item.value}</td>
            <td>${item.unit}</td>
            <td>${item.normalRange}</td>
            <td class="${statusClass}">${item.status}</td>
          </tr>
        `;
      });
      
      tableHtml += '</tbody></table>';
      tableContainer.innerHTML = tableHtml;
    }

    function openUploadModal(testId) {
      if (!testId) testId = emergencyUploadFix();
      if (!testId) {
        alert("ไม่พบรหัสการตรวจ");
        return;
      }
      currentTestId = testId;
      selectedFile = null;

      const uploadBtn = document.getElementById('uploadBtn');
      if (uploadBtn) {
        uploadBtn.disabled = true;
        uploadBtn.classList.add('disabled');
      }

      document.getElementById('fileInput').value = "";
      document.getElementById('selectedFile').style.display = 'none';
      document.getElementById('uploadModal').classList.add('show');

      closeDetailModal();
    }

    function closeDetailModal() {
      const detailModal = document.getElementById('detailModal');
      if (detailModal) {
        detailModal.classList.remove('show');
      }
      console.log('Detail modal closed');
    }

    function closeUploadModal() {
      const uploadModal = document.getElementById('uploadModal');
      if (uploadModal) {
        uploadModal.classList.remove('show');
      }
      selectedFile = null;
      currentTestId = null;
      console.log('Upload modal closed');
    }

    function handleFileSelect(event) {
      console.log('🔍 handleFileSelect called');
      const file = event.target.files[0];
      const fileNameElement = document.getElementById('fileName');
      const selectedFileDiv = document.getElementById('selectedFile');
      const uploadBtn = document.getElementById('uploadBtn');

      console.log('📁 Selected file:', file);

      if (file) {
        // ตรวจสอบว่าเป็น Excel
        const allowedTypes = [
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", // .xlsx
          "application/vnd.ms-excel", // .xls
          "application/excel",
          "application/x-excel",
          "application/x-msexcel"
        ];

        const fileExtension = file.name.toLowerCase().split('.').pop();
        const isValidExtension = ['xlsx', 'xls'].includes(fileExtension);
        const isValidType = allowedTypes.includes(file.type);
          
        console.log('📄 File type:', file.type); // Debug log
        console.log('📄 File extension:', fileExtension); // Debug log
        console.log('✅ Valid type:', isValidType); // Debug log
        console.log('✅ Valid extension:', isValidExtension); // Debug log
        
        if (!allowedTypes.includes(file.type)) {
          alert("กรุณาเลือกไฟล์ Excel (.xlsx, .xls) เท่านั้น");
          event.target.value = "";
          uploadBtn.disabled = true;
          return;
        }

        selectedFile = file;
        console.log('✅ selectedFile assigned:', selectedFile);
        // แสดงไฟล์ที่เลือก
        if (fileNameElement) {
          fileNameElement.textContent = file.name;
        }
        if (selectedFileDiv) {
          selectedFileDiv.style.display = "flex";
        }
        if (uploadBtn) {
          uploadBtn.disabled = false;
          uploadBtn.classList.remove('disabled'); // ลบ class disabled ถ้ามี
          console.log('✅ Upload button enabled'); // Debug log
        } else {
          console.error('❌ Upload button not found!');
        }
      } else {
        // ถ้าไม่มีไฟล์
        selectedFile = null;
        if (uploadBtn) {
          uploadBtn.disabled = true;
          uploadBtn.classList.add('disabled');
        }
        console.log('❌ No file selected');
      }
    }

    function checkUploadButtonStatus() {
      const uploadBtn = document.getElementById('uploadBtn');
      const fileInput = document.getElementById('fileInput');
      
      console.log('🔍 Upload Button Check:');
      console.log('- Button exists:', !!uploadBtn);
      console.log('- Button disabled:', uploadBtn ? uploadBtn.disabled : 'N/A');
      console.log('- Button text:', uploadBtn ? uploadBtn.textContent : 'N/A');
      console.log('- Current test ID:', currentTestId);
      console.log('- Selected file variable:', selectedFile);
      console.log('- File input files:', fileInput ? fileInput.files.length : 'N/A');
      
      return {
        buttonExists: !!uploadBtn,
        buttonDisabled: uploadBtn ? uploadBtn.disabled : true,
        hasFile: selectedFile !== null,
        hasTestId: currentTestId !== null
      };
    }

    function removeFile() {
      selectedFile = null;
      document.getElementById('fileInput').value = "";
      document.getElementById('selectedFile').style.display = 'none';
      document.getElementById('uploadBtn').disabled = true;
    }

  
    function quickFixCurrentTestId() {
      // หาคาร์ดที่มี status 'today' และยังไม่มี results
      const todayTests = bloodTests.filter(test => test.status === 'today' && !test.results);
      
      if (todayTests.length > 0) {
        const testId = todayTests[0].id;
        currentTestId = testId;
        console.log('Quick fix: currentTestId set to:', testId);
        return testId;
      } else {
        console.error('No available tests for today');
        return null;
      }
    }

    function uploadFile() {
      const fileInput = document.getElementById('fileInput');
      const file = fileInput?.files?.[0];
      const uploadBtn = document.getElementById('uploadBtn');

      if (!file) {
        alert('กรุณาเลือกไฟล์ก่อนอัปโหลด');
        return;
      }

      if (!currentTestId) {
        alert('ไม่พบรหัสการตรวจ กรุณาลองใหม่');
        return;
      }

      uploadBtn.classList.add('loading');
      uploadBtn.textContent = 'กำลังอัปโหลด...';
      uploadBtn.disabled = true;

      const reader = new FileReader();
      reader.onload = (e) => {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const firstSheet = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[firstSheet];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { defval: '' });

        const processedData = processExcelData(jsonData);

        // 📌 ส่งไป Backend
        fetch('/api/Staffblood/upload', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              testId: currentTestId,
              results: processedData
            })
          })
          
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              closeUploadModal();
              // โหลดข้อมูลใหม่และเปลี่ยนแท็บ
              loadBloodTests().then(() => {
                switchTab('completed');
                showNotification('อัปโหลดผลตรวจสำเร็จ', 'success');
              });
            } else {
              alert('อัปโหลดไม่สำเร็จ: ' + data.message);
            }
          })
          .catch(err => {
            console.error('❌ Upload failed:', err);
            alert('เกิดข้อผิดพลาดในการอัปโหลด');
          })
          .finally(() => {
            uploadBtn.classList.remove('loading');
            uploadBtn.textContent = 'อัปโหลด';
            uploadBtn.disabled = false;
          });
      };

      reader.readAsArrayBuffer(file);
    }


    function testCompleteUploadFlow() {
      console.log('Testing complete upload flow...');
      
      // Step 1: เปิด modal
      openUploadModal('BT001');
      
      // Step 2: จำลองการเลือกไฟล์
      setTimeout(() => {
        console.log('Simulating file selection...');
        selectedFile = new File(['test'], 'test.xlsx', {
          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        });
        
        const uploadBtn = document.getElementById('uploadBtn');
        if (uploadBtn) {
          uploadBtn.disabled = false;
          uploadBtn.style.opacity = '1';
          uploadBtn.style.pointerEvents = 'auto';
        }
        
        console.log('File simulation complete. Ready for upload test.');
        console.log('Current state:', {
          currentTestId,
          hasSelectedFile: !!selectedFile,
          uploadBtnEnabled: uploadBtn ? !uploadBtn.disabled : 'not found'
        });
      }, 1000);
    }

    function emergencyUploadFix() {
      console.log('Applying emergency upload fix...');
      
      // กำหนด currentTestId ให้เป็น test แรกที่หาเจอ
      const availableTest = bloodTests.find(test => test.status === 'today' && !test.results);
      
      if (availableTest) {
        currentTestId = availableTest.id;
        console.log('Emergency fix: currentTestId set to:', currentTestId);
        
        // เปิดใช้งานปุ่มอัปโหลด
        const uploadBtn = document.getElementById('uploadBtn');
        if (uploadBtn && selectedFile) {
          uploadBtn.disabled = false;
          uploadBtn.style.opacity = '1';
          uploadBtn.style.pointerEvents = 'auto';
          uploadBtn.classList.remove('disabled');
          console.log('Emergency fix: Upload button enabled');
        }
        
        return true;
      } else {
        console.error('Emergency fix failed: No available tests found');
        return false;
      }
    }

    function addDirectUploadHandler() {
      const uploadBtn = document.getElementById('uploadBtn');
      if (uploadBtn) {
        // ลบ onclick attribute เก่า
        uploadBtn.removeAttribute('onclick');
        
        // เพิ่ม event listener ใหม่
        uploadBtn.addEventListener('click', function(e) {
          e.preventDefault();
          
          console.log('Direct upload handler called');
          console.log('Button disabled:', this.disabled);
          
          if (!this.disabled) {
            // ตรวจสอบและแก้ไขก่อนอัปโหลด
            if (!currentTestId) {
              emergencyUploadFix();
            }
            
            if (currentTestId && selectedFile) {
              uploadFile();
            } else {
              alert('กรุณาตรวจสอบ:\n- ไฟล์ที่เลือก: ' + (selectedFile ? 'มี' : 'ไม่มี') + '\n- รหัสการตรวจ: ' + (currentTestId || 'ไม่มี'));
            }
          }
        });
        
        console.log('Direct upload handler added');
      }
    }

    function debugCurrentState() {
      console.log('=== DEBUG CURRENT STATE ===');
      console.log('currentTab:', currentTab);
      console.log('currentTestId:', currentTestId);
      console.log('selectedFile:', selectedFile);
      console.log('bloodTests:', bloodTests);
      
      const uploadBtn = document.getElementById('uploadBtn');
      console.log('uploadBtn exists:', !!uploadBtn);
      console.log('uploadBtn disabled:', uploadBtn ? uploadBtn.disabled : 'N/A');
      
      return {
        currentTab,
        currentTestId,
        hasSelectedFile: !!selectedFile,
        hasUploadBtn: !!uploadBtn,
        btnDisabled: uploadBtn ? uploadBtn.disabled : true
      };
    }

    // labTestReference (object)
    const labTestReference = {
      'Electrolyte (Na, K, Cl, CO2)': { category: 'เคมีคลินิก', normalRange: 'Na: 136-145 mmol/L, K: 3.5-5.1 mmol/L, Cl: 98-107 mmol/L' },
      'Blood gas analysis': { category: 'แก๊สในเลือด', normalRange: 'pH: 7.35-7.45, HCO3: 22-28 mmol/L' },
      'Liver function test': { category: 'ตับ', normalRange: 'ALT: <40 U/L, AST: <40 U/L' },
      'Lipid profile (Cholesterol, HDL-chol, LDL-chol, TG)': { category: 'ไขมันในเลือด', normalRange: 'Total Chol: <200 mg/dL, HDL: >40 mg/dL' },
      'Glucose': { category: 'น้ำตาล', normalRange: 'Fasting: 70-100 mg/dL, Random: <140 mg/dL' },
      'BUN (Blood Urea Nitrogen)': { category: 'ไต', normalRange: '7-20 mg/dL' },
      'Creatinine': { category: 'ไต', normalRange: '0.7-1.2 mg/dL (ชาย), 0.6-1.1 mg/dL (หญิง)' },
      'Uric acid': { category: 'กรดยูริค', normalRange: '3.5-7.2 mg/dL (ชาย), 2.6-6.0 mg/dL (หญิง)' },
      'HbA1c': { category: 'น้ำตาลเรื้อรัง', normalRange: '<5.7% (ปกติ), 5.7-6.4% (เสี่ยง)' },
      'TSH (Thyroid Stimulating Hormone)': { category: 'ฮอร์โมนไทรอยด์', normalRange: '0.27-4.2 mIU/L' },
      'Free T4': { category: 'ฮอร์โมนไทรอยด์', normalRange: '12-22 pmol/L' },
      'Ferritin': { category: 'ธาตุเหล็ก', normalRange: '15-150 ng/mL (หญิง), 15-200 ng/mL (ชาย)' }
    };

    // ✅ ฟังก์ชันแปลงข้อมูลจาก Excel
    function processExcelData(jsonData) {
      return jsonData.map(row => {
        const testName = row.Test?.trim() || '';
        const value = row.Value ?? '';
        const unit = row.Unit ?? '';

        const ref = labTestReference[testName]; // ✅ ใช้ object lookup แทน find()

        let status = 'ไม่ทราบ';
        let normalRange = ref?.normalRange || '-';
        let category = ref?.category || '-';

        // 🔎 ตรวจค่าเฉพาะกรณีที่ normalRange เป็นตัวเลขช่วง เช่น "70-100"
        const rangeMatch = normalRange.match(/(\d+)-(\d+)/);
        if (rangeMatch) {
          const min = parseFloat(rangeMatch[1]);
          const max = parseFloat(rangeMatch[2]);
          const val = parseFloat(value);
          if (!isNaN(val)) {
            if (val < min) status = 'ต่ำ';
            else if (val > max) status = 'สูง';
            else status = 'ปกติ';
          }
        }

        return {
          test: testName,
          value: value,
          unit: unit,
          category: category,
          normalRange: normalRange,
          status: status
        };
      });
    }





    function determineStatus(value, normalRange) {
      const numValue = parseFloat(value);
      if (isNaN(numValue)) return "ไม่ระบุ";

      const range = normalRange.trim();

      // Case 1: ช่วงแบบ 70-100
      if (range.includes("-")) {
        const [min, max] = range.split("-").map(v => parseFloat(v));
        if (!isNaN(min) && !isNaN(max)) {
          if (numValue < min) return "ต่ำ";
          if (numValue > max) return "สูง";
          return "ปกติ";
        }
      }

      // Case 2: เงื่อนไข < หรือ >
      if (range.startsWith("<")) {
        const limit = parseFloat(range.replace("<", "").trim());
        if (!isNaN(limit)) {
          return numValue < limit ? "ปกติ" : "สูง";
        }
      }

      if (range.startsWith(">")) {
        const limit = parseFloat(range.replace(">", "").trim());
        if (!isNaN(limit)) {
          return numValue > limit ? "ปกติ" : "ต่ำ";
        }
      }

      // Case 3: ตัวเลขเดียว
      const exact = parseFloat(range);
      if (!isNaN(exact)) {
        return numValue === exact ? "ปกติ" : numValue > exact ? "สูง" : "ต่ำ";
      }

      // Default
      return "ไม่ระบุ";
    }

    function closeSuccessModal() {
      const successModal = document.getElementById('successModal');
      if (successModal) {
        successModal.classList.remove('show');
      }
      currentTestId = null;
      console.log('Success modal closed');
    }

    function downloadResult(testId) {
      const test = bloodTests.find(b => b.id === testId);
      if (!test || !test.results) return;

      const ws = XLSX.utils.json_to_sheet(test.results.map(item => ({
        'รายการตรวจ': item.test,
        'ค่าที่วัดได้': item.value,
        'หน่วย': item.unit,
        'ค่าปกติ': item.normalRange,
        'สถานะ': item.status
      })));

      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'ผลตรวจเลือด');
      const filename = `ผลตรวจเลือด_${test.patientName}_${test.id}_${new Date().toISOString().split('T')[0]}.xlsx`;
      XLSX.writeFile(wb, filename);

      showNotification(`กำลังดาวน์โหลดผลตรวจเลือดของ ${test.patientName}`, 'success');
    }

    // Show notification
    function showNotification(message, type = 'success') {
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.innerHTML = `
        <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
        ${message}
      `;
      
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#10B981' : type === 'error' ? '#EF4444' : '#3B82F6'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 2000;
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
        animation: slideIn 0.3s ease-out;
        max-width: 300px;
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-in forwards';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 4000);
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
      // เพิ่ม click listener ให้ปุ่มอัปโหลดเพื่อ debug
      const uploadBtn = document.getElementById('uploadBtn');
      if (uploadBtn) {
        uploadBtn.addEventListener('click', function(e) {
          console.log('🔍 Upload button clicked');
          console.log('- Event:', e);
          console.log('- Button disabled:', this.disabled);
          console.log('- Current test ID:', currentTestId);
          console.log('- Selected file:', selectedFile);
          
          if (this.disabled) {
            console.log('❌ Button is disabled, preventing upload');
            e.preventDefault();
            e.stopPropagation();
            return false;
          }
        });
      }
    });
    function forceEnableUploadButton() {
      const uploadBtn = document.getElementById('uploadBtn');
      if (uploadBtn) {
        uploadBtn.disabled = false;
        uploadBtn.classList.remove('disabled');
        uploadBtn.style.opacity = '1';
        uploadBtn.style.pointerEvents = 'auto';
        console.log('✅ Upload button force enabled');
        return true;
      }
      console.log('❌ Upload button not found');
      return false;
    }
    // Add CSS for notification animations
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideIn {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
      
      @keyframes slideOut {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
  </script>
  
</body>
</html>