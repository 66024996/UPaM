<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>รายการตรวจเลือด - UPaM Lab</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <style>
    * {
      margin: 0; padding: 0; box-sizing: border-box;
    }
    body {
      font-family: 'Inter', sans-serif;
      background: #f8fafc;
      min-height: 100vh;
      font-size: 14px;
    }

    /* Header */
    .header {
      background: white;
      padding: 12px 24px;
      box-shadow: 0 5px 10px rgba(0, 0, 0, 0.477);
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 100;
      background: linear-gradient(135deg, #ffff 0%, #183ccbba 100%);
    }

    .logo {
      display: flex;
      align-items: center;
    }

    .logo-img {
      width: 60px;
      height: 60px;
      margin-right: 10px;
    }

    .phone-number {
      color: #6B7280;
      font-size: 16px;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .header-right {
      display: flex;
      align-items: center;
      gap: 20px;
    }

    .staff-info {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      color: #374151;
    }

    .staff-name {
      font-weight: 600;
      font-size: 14px;
    }

    .staff-role {
      font-size: 12px;
      color: #6B7280;
    }

    .header-icons {
      display: flex;
      gap: 8px;
    }

    .icon-btn {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: #F3F4F6;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s ease;
      color: #6B7280;
    }

    .icon-btn:hover {
      background: #E5E7EB;
      transform: translateY(-1px);
    }

    .notification-btn {
      position: relative;
    }

    .notification-btn::after {
      content: '';
      position: absolute;
      top: 6px;
      right: 6px;
      width: 8px;
      height: 8px;
      background: #EF4444;
      border-radius: 50%;
      border: 2px solid white;
    }

    /* Container */
    .container {
      max-width: 1200px;
      margin: 40px auto;
      padding: 0 20px;
    }

    .page-title {
      text-align: center;
      font-size: 48px;
      color: #3B82F6;
      font-weight: 600;
      margin-bottom: 10px;
    }

    .subtitle {
      text-align: center;
      color: #6B7280;
      font-size: 18px;
      margin-bottom: 40px;
    }

    /* Search and Filter Section */
    .filter-section {
      background: white;
      border-radius: 16px;
      padding: 24px;
      margin-bottom: 24px;
      box-shadow: 0 4px 16px rgba(0,0,0,0.08);
    }

    .filter-row {
      display: flex;
      gap: 20px;
      align-items: center;
      flex-wrap: wrap;
    }

    .search-input {
      flex: 1;
      min-width: 300px;
      padding: 12px 16px;
      border: 2px solid #E5E7EB;
      border-radius: 8px;
      font-size: 16px;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="gray"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/></svg>') no-repeat right 12px center;
      background-size: 20px;
      padding-right: 40px;
    }

    .search-input:focus {
      outline: none;
      border-color: #3B82F6;
    }

    .date-filter {
      padding: 12px 16px;
      border: 2px solid #E5E7EB;
      border-radius: 8px;
      font-size: 16px;
      background: white;
      cursor: pointer;
    }

    .date-filter:focus {
      outline: none;
      border-color: #3B82F6;
    }

    /* Status Tabs */
    .status-tabs {
      display: flex;
      gap: 8px;
      margin-bottom: 24px;
      background: white;
      padding: 8px;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .status-tab {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      background: transparent;
      color: #6B7280;
      position: relative;
    }

    .status-tab.active {
      background: #3B82F6;
      color: white;
    }

    .status-tab:hover:not(.active) {
      background: #F3F4F6;
      color: #374151;
    }

    .status-count {
      background: #EF4444;
      color: white;
      border-radius: 12px;
      padding: 2px 8px;
      font-size: 12px;
      font-weight: 600;
      margin-left: 8px;
    }

    .status-tab.active .status-count {
      background: rgba(255,255,255,0.3);
    }

    /* Test Cards */
    .test-list {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }

    .test-card {
      background: white;
      border-radius: 16px;
      padding: 24px;
      box-shadow: 0 4px 16px rgba(0,0,0,0.08);
      border-left: 4px solid #10B981;
      transition: all 0.2s ease;
      cursor: pointer;
    }

    .test-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    }

    .test-card.completed {
      border-left-color: #6B7280;
      opacity: 0.8;
    }

    .test-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 16px;
    }

    .test-id {
      font-size: 18px;
      font-weight: 700;
      color: #1F2937;
    }

    .test-status {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 600;
    }

    .status-today {
      background: #DBEAFE;
      color: #1E40AF;
    }

    .status-completed {
      background: #D1FAE5;
      color: #065F46;
    }

    .status-past {
      background: #F3F4F6;
      color: #6B7280;
    }

    .test-info {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 16px;
      margin-bottom: 16px;
    }

    .info-item {
      display: flex;
      flex-direction: column;
      gap: 4px;
    }

    .info-label {
      font-size: 14px;
      color: #6B7280;
      font-weight: 500;
    }

    .info-value {
      font-size: 16px;
      color: #1F2937;
      font-weight: 500;
    }

    .price-value {
      color: #EF4444;
      font-weight: 700;
    }

    .test-actions {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
      margin-top: 16px;
      padding-top: 16px;
      border-top: 1px solid #E5E7EB;
    }

    .btn {
      padding: 8px 16px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      display: inline-flex;
      align-items: center;
      gap: 6px;
    }

    .btn-view {
      background: #F3F4F6;
      color: #374151;
      border: 1px solid #E5E7EB;
    }

    .btn-view:hover {
      background: #E5E7EB;
    }

    .btn-upload {
      background: #3B82F6;
      color: white;
    }

    .btn-upload:hover {
      background: #2563EB;
    }

    .btn-download {
      background: #10B981;
      color: white;
    }

    .btn-download:hover {
      background: #059669;
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    /* Results Display */
    .results-table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
      background: white;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .results-table th,
    .results-table td {
      padding: 12px 16px;
      text-align: left;
      border-bottom: 1px solid #E5E7EB;
    }

    .results-table th {
      background: #F8FAFC;
      font-weight: 600;
      color: #374151;
    }

    .results-table tr:hover {
      background: #F9FAFB;
    }

    .abnormal-value {
      color: #EF4444;
      font-weight: 600;
    }

    .normal-value {
      color: #059669;
    }

    .results-summary {
      background: #EFF6FF;
      border: 1px solid #DBEAFE;
      border-radius: 8px;
      padding: 16px;
      margin: 16px 0;
    }

    .summary-title {
      font-size: 16px;
      font-weight: 600;
      color: #1E40AF;
      margin-bottom: 8px;
    }

    .summary-content {
      color: #374151;
      line-height: 1.5;
    }

    /* Detail Modal */
    .detail-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      justify-content: center;
      align-items: center;
    }

    .detail-modal.show {
      display: flex;
    }

    .modal-content {
      background: white;
      border-radius: 16px;
      padding: 32px;
      max-width: 800px;
      width: 90%;
      max-height: 90vh;
      overflow-y: auto;
      box-shadow: 0 20px 40px rgba(0,0,0,0.2);
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
      padding-bottom: 16px;
      border-bottom: 2px solid #E5E7EB;
    }

    .modal-title {
      font-size: 24px;
      font-weight: 700;
      color: #1F2937;
    }

    .close-btn {
      background: none;
      border: none;
      font-size: 24px;
      color: #6B7280;
      cursor: pointer;
      padding: 4px;
      border-radius: 4px;
      transition: all 0.2s ease;
    }

    .close-btn:hover {
      background: #F3F4F6;
      color: #374151;
    }

    .detail-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-bottom: 24px;
    }

    .detail-item {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }

    .detail-label {
      font-size: 14px;
      color: #6B7280;
      font-weight: 500;
    }

    .detail-value {
      font-size: 16px;
      color: #1F2937;
      font-weight: 500;
    }

    .modal-actions {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
      margin-top: 24px;
      padding-top: 16px;
      border-top: 1px solid #E5E7EB;
    }

    /* Upload Modal */
    .upload-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1001;
      justify-content: center;
      align-items: center;
    }

    .upload-modal.show {
      display: flex;
    }

    .upload-modal-content {
      background: white;
      border-radius: 16px;
      padding: 32px;
      max-width: 500px;
      width: 90%;
      box-shadow: 0 20px 40px rgba(0,0,0,0.2);
    }

    .upload-modal-title {
      font-size: 20px;
      font-weight: 600;
      color: #1F2937;
      margin-bottom: 20px;
      text-align: center;
    }

    .file-upload-area {
      border: 2px dashed #D1D5DB;
      border-radius: 12px;
      padding: 40px 20px;
      text-align: center;
      margin-bottom: 20px;
      transition: all 0.2s ease;
      cursor: pointer;
    }

    .file-upload-area:hover {
      border-color: #3B82F6;
      background: #F8FAFC;
    }

    .file-upload-area.dragover {
      border-color: #3B82F6;
      background: #EFF6FF;
    }

    .upload-icon {
      font-size: 48px;
      color: #9CA3AF;
      margin-bottom: 16px;
    }

    .upload-text {
      font-size: 16px;
      color: #374151;
      margin-bottom: 8px;
    }

    .upload-subtext {
      font-size: 14px;
      color: #6B7280;
    }

    .file-input {
      display: none;
    }

    .selected-file {
      background: #EFF6FF;
      padding: 12px 16px;
      border-radius: 8px;
      margin: 12px 0;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .file-name {
      flex: 1;
      font-weight: 500;
      color: #1F2937;
    }

    .remove-file {
      background: none;
      border: none;
      color: #EF4444;
      cursor: pointer;
      font-size: 18px;
      padding: 4px;
      border-radius: 4px;
    }

    .remove-file:hover {
      background: #FEE2E2;
    }

    .upload-modal-actions {
      display: flex;
      gap: 12px;
      justify-content: center;
    }

    .btn-modal {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn-modal-primary {
      background: #3B82F6;
      color: white;
    }

    .btn-modal-primary:hover {
      background: #2563EB;
    }

    .btn-modal-secondary {
      background: #F3F4F6;
      color: #374151;
    }

    .btn-modal-secondary:hover {
      background: #E5E7EB;
    }

    /* Success Modal */
    .success-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1002;
      justify-content: center;
      align-items: center;
    }

    .success-modal.show {
      display: flex;
    }

    .success-modal-content {
      background: white;
      border-radius: 16px;
      padding: 40px;
      max-width: 400px;
      width: 90%;
      text-align: center;
      box-shadow: 0 20px 40px rgba(0,0,0,0.2);
    }

    .success-icon {
      width: 80px;
      height: 80px;
      background: #10B981;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 20px;
      color: white;
      font-size: 36px;
    }

    .success-title {
      font-size: 24px;
      font-weight: 600;
      color: #1F2937;
      margin-bottom: 10px;
    }

    .success-message {
      font-size: 16px;
      color: #6B7280;
      margin-bottom: 24px;
      line-height: 1.5;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #6B7280;
    }

    .empty-icon {
      font-size: 48px;
      margin-bottom: 16px;
      color: #D1D5DB;
    }

    .empty-title {
      font-size: 20px;
      font-weight: 600;
      margin-bottom: 8px;
    }

    .empty-message {
      font-size: 16px;
    }

    /* Loading */
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }

    .btn.loading::after {
      content: "";
      width: 14px;
      height: 14px;
      margin-left: 6px;
      border: 2px solid transparent;
      border-top: 2px solid currentColor;
      border-radius: 50%;
      display: inline-block;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Responsive */
    @media (max-width: 768px) {
      .container {
        padding: 0 16px;
      }

      .page-title {
        font-size: 32px;
      }

      .filter-row {
        flex-direction: column;
      }

      .search-input {
        min-width: 100%;
      }

      .test-info {
        grid-template-columns: 1fr;
      }

      .test-actions {
        flex-wrap: wrap;
      }

      .detail-grid {
        grid-template-columns: 1fr;
      }

      .status-tabs {
        overflow-x: auto;
        padding: 8px;
      }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <div class="header">
    <div class="logo">
      <img src="./img/UPaMLOGO.png" class="logo-img"> 
      <div class="phone-number">
        <i class="fas fa-phone"></i>
        1234
      </div>
    </div>
    
    <div class="header-right">
      <div class="staff-info">
        <div class="staff-name">นพ. สมชาย วิทยากร</div>
        <div class="staff-role">เจ้าหน้าที่ห้องปฏิบัติการ</div>
      </div>
      <div class="header-icons">
        <button class="icon-btn" title="ค้นหา">
          <i class="fas fa-search"></i>
        </button>
        <button class="icon-btn notification-btn" title="การแจ้งเตือน">
          <i class="fas fa-bell"></i>
        </button>
        <button class="icon-btn" title="บัญชีผู้ใช้">
          <i class="fas fa-user"></i>
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="container">
    <h1 class="page-title">ห้องปฏิบัติการตรวจเลือด</h1>
    <p class="subtitle">ระบบจัดการผลตรวจเลือดและอัปโหลดไฟล์ Excel</p>

    <!-- Filter Section -->
    <div class="filter-section">
      <div class="filter-row">
        <input type="text" class="search-input" placeholder="ค้นหาด้วยรหัสตรวจ หรือ ชื่อผู้ป่วย..." id="searchInput">
        <input type="date" class="date-filter" id="dateFilter">
      </div>
    </div>

    <!-- Status Tabs -->
    <div class="status-tabs">
      <button class="status-tab active" data-status="today" onclick="switchTab('today')">
        วันนี้ <span class="status-count" id="todayCount">3</span>
      </button>
      <button class="status-tab" data-status="completed" onclick="switchTab('completed')">
        ที่อัปโหลดแล้ว <span class="status-count" id="completedCount">5</span>
      </button>
      <button class="status-tab" data-status="history" onclick="switchTab('history')">
        ประวัติ <span class="status-count" id="historyCount">12</span>
      </button>
    </div>

    <!-- Test List -->
    <div class="test-list" id="testList">
      <!-- Tests will be populated here -->
    </div>
  </div>

  <!-- Detail Modal -->
  <div class="detail-modal" id="detailModal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">รายละเอียดผลตรวจเลือด</h3>
        <button class="close-btn" onclick="closeDetailModal()">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="detail-grid">
        <div class="detail-item">
          <div class="detail-label">รหัสตรวจ</div>
          <div class="detail-value" id="modalTestId">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">ชื่อ-นามสกุล</div>
          <div class="detail-value" id="modalPatientName">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">ประเภทการตรวจ</div>
          <div class="detail-value" id="modalTestType">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">วันที่ตรวจ</div>
          <div class="detail-value" id="modalDate">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">เวลา</div>
          <div class="detail-value" id="modalTime">-</div>
        </div>
        
        <div class="detail-item">
          <div class="detail-label">ค่าบริการ</div>
          <div class="detail-value price-value" id="modalPrice">-</div>
        </div>
      </div>

      <!-- Results Section -->
      <div id="resultsSection" style="display: none;">
        <div class="results-summary" id="resultsSummary"></div>
        <div id="resultsTableContainer"></div>
      </div>
      
      <div class="modal-actions" id="modalActions">
        <!-- Actions will be populated based on status -->
      </div>
    </div>
  </div>

  <!-- Upload Modal -->
  <div class="upload-modal" id="uploadModal">
    <div class="upload-modal-content">
      <h3 class="upload-modal-title">อัปโหลดผลตรวจเลือด</h3>
      
      <div class="file-upload-area" id="fileUploadArea" onclick="document.getElementById('fileInput').click()">
        <div class="upload-icon">
          <i class="fas fa-cloud-upload-alt"></i>
        </div>
        <div class="upload-text">คลิกหรือลากไฟล์มาวางที่นี่</div>
        <div class="upload-subtext">รองรับไฟล์ Excel (.xlsx, .xls) สูงสุด 10MB</div>
      </div>
      
      <input type="file" id="fileInput" class="file-input" accept=".xlsx,.xls" onchange="handleFileSelect(event)">
      
      <div id="selectedFile" class="selected-file" style="display: none;">
        <i class="fas fa-file-excel"></i>
        <span class="file-name" id="fileName"></span>
        <button class="remove-file" onclick="removeFile()">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="upload-modal-actions">
        <button class="btn-modal btn-modal-secondary" onclick="closeUploadModal()">ยกเลิก</button>
        <button class="btn-modal btn-modal-primary" id="uploadBtn" onclick="uploadFile()" disabled>อัปโหลด</button>
      </div>
    </div>
  </div>

  <!-- Success Modal -->
  <div class="success-modal" id="successModal">
    <div class="success-modal-content">
      <div class="success-icon">
        <i class="fas fa-check"></i>
      </div>
      <h3 class="success-title">อัปโหลดสำเร็จ!</h3>
      <p class="success-message" id="successMessage">
        ผลตรวจเลือดได้ถูกอัปโหลดเรียบร้อยแล้ว
      </p>
      <button class="btn-modal btn-modal-primary" onclick="closeSuccessModal()">
        ตกลง
      </button>
    </div>
  </div>

  <script>
    // Lab test reference data based on the document
    const labTestReference = {
      'Electrolyte (Na, K, Cl, CO2)': { category: 'เคมีคลินิก', normalRange: 'Na: 136-145 mmol/L, K: 3.5-5.1 mmol/L, Cl: 98-107 mmol/L' },
      'Blood gas analysis': { category: 'แก๊สในเลือด', normalRange: 'pH: 7.35-7.45, HCO3: 22-28 mmol/L' },
      'Liver function test': { category: 'ตับ', normalRange: 'ALT: <40 U/L, AST: <40 U/L' },
      'Lipid profile (Cholesterol, HDL-chol, LDL-chol, TG)': { category: 'ไขมันในเลือด', normalRange: 'Total Chol: <200 mg/dL, HDL: >40 mg/dL' },
      'Glucose': { category: 'น้ำตาล', normalRange: 'Fasting: 70-100 mg/dL, Random: <140 mg/dL' },
      'BUN (Blood Urea Nitrogen)': { category: 'ไต', normalRange: '7-20 mg/dL' },
      'Creatinine': { category: 'ไต', normalRange: '0.7-1.2 mg/dL (ชาย), 0.6-1.1 mg/dL (หญิง)' },
      'Uric acid': { category: 'กรดยูริค', normalRange: '3.5-7.2 mg/dL (ชาย), 2.6-6.0 mg/dL (หญิง)' },
      'HbA1c': { category: 'น้ำตาลเรื้อรัง', normalRange: '<5.7% (ปกติ), 5.7-6.4% (เสี่ยง)' },
      'TSH (Thyroid Stimulating Hormone)': { category: 'ฮอร์โมนไทรอยด์', normalRange: '0.27-4.2 mIU/L' },
      'Free T4': { category: 'ฮอร์โมนไทรอยด์', normalRange: '12-22 pmol/L' },
      'Ferritin': { category: 'ธาตุเหล็ก', normalRange: '15-150 ng/mL (หญิง), 15-200 ng/mL (ชาย)' }
    };

    // Sample test data
    let bloodTests = [
      {
        id: 'LAB001',
        patientName: 'นายสมชาย ใจดี',
        testType: 'Lipid profile (Cholesterol, HDL-chol, LDL-chol, TG)',
        date: '01/09/2025',
        time: '08:00-08:30',
        price: '450',
        status: 'today',
        labStaff: 'นพ. สมชาย วิทยากร',
        results: null,
        excelData: null
      },
      {
        id: 'LAB002',
        patientName: 'นางสาวสมหญิง รักสุขภาพ',
        testType: 'HbA1c',
        date: '01/09/2025',
        time: '09:00-09:30',
        price: '350',
        status: 'today',
        labStaff: 'นพ. สมชาย วิทยากร',
        results: null,
        excelData: null
      },
      {
        id: 'LAB003',
        patientName: 'นายวิชัย สุขใจ',
        testType: 'Liver function test',
        date: '01/09/2025',
        time: '10:00-10:30',
        price: '380',
        status: 'today',
        labStaff: 'นพ. สมชาย วิทยากร',
        results: null,
        excelData: null
      },
      {
        id: 'LAB004',
        patientName: 'นางจินตรา จันทร์เจ้า',
        testType: 'TSH (Thyroid Stimulating Hormone)',
        date: '31/08/2025',
        time: '08:30-09:00',
        price: '320',
        status: 'completed',
        labStaff: 'นพ. สมชาย วิทยากร',
        results: 'ผลตรวจปกติ - TSH: 2.1 mIU/L (ช่วงปกติ)',
        excelData: [
          { test: 'TSH', value: '2.1', unit: 'mIU/L', normalRange: '0.27-4.2', status: 'ปกติ' }
        ]
      },
      {
        id: 'LAB005',
        patientName: 'นายประสิทธิ์ แข็งแรง',
        testType: 'Glucose',
        date: '31/08/2025',
        time: '07:30-08:00',
        price: '120',
        status: 'completed',
        labStaff: 'นพ. สมชาย วิทยากร',
        results: 'ผลตรวจสูงกว่าปกติ - Glucose: 145 mg/dL (สูงกว่าปกติ)',
        excelData: [
          { test: 'Glucose (Fasting)', value: '145', unit: 'mg/dL', normalRange: '70-100', status: 'สูง' }
        ]
      }
    ];

    let currentTab = 'today';
    let currentTestId = null;
    let selectedFile = null;

    // Initialize page
    function initializePage() {
      setTodayDate();
      renderTests();
      updateCounts();
      setupEventListeners();
    }

    // Set today's date as default
    function setTodayDate() {
      const today = new Date();
      const dateString = today.toISOString().split('T')[0];
      document.getElementById('dateFilter').value = dateString;
    }

    // Setup event listeners
    function setupEventListeners() {
      document.getElementById('searchInput').addEventListener('input', handleSearch);
      document.getElementById('dateFilter').addEventListener('change', handleDateFilter);
      
      // Modal event listeners
      document.getElementById('detailModal').addEventListener('click', function(e) {
        if (e.target === this) closeDetailModal();
      });
      
      document.getElementById('uploadModal').addEventListener('click', function(e) {
        if (e.target === this) closeUploadModal();
      });
      
      document.getElementById('successModal').addEventListener('click', function(e) {
        if (e.target === this) closeSuccessModal();
      });
      
      // File upload drag and drop
      const uploadArea = document.getElementById('fileUploadArea');
      
      uploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        uploadArea.classList.add('dragover');
      });
      
      uploadArea.addEventListener('dragleave', function(e) {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
      });
      
      uploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          handleFileSelect({ target: { files: files } });
        }
      });
      
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          closeDetailModal();
          closeUploadModal();
          closeSuccessModal();
        }
      });
    }

    // Switch between tabs
    function switchTab(status) {
      currentTab = status;
      
      // Update tab appearance
      document.querySelectorAll('.status-tab').forEach(tab => {
        tab.classList.remove('active');
      });
      document.querySelector(`[data-status="${status}"]`).classList.add('active');
      
      renderTests();
    }

    // Render tests based on current tab
    function renderTests() {
      const testList = document.getElementById('testList');
      const filteredTests = bloodTests.filter(test => test.status === currentTab);
      
      if (filteredTests.length === 0) {
        testList.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">
              <i class="fas fa-vial"></i>
            </div>
            <div class="empty-title">ไม่มีรายการในสถานะนี้</div>
            <div class="empty-message">ยังไม่มีรายการตรวจเลือดที่ต้องจัดการในขณะนี้</div>
          </div>
        `;
        return;
      }

      let html = '';
      filteredTests.forEach(test => {
        const statusClass = test.status === 'today' ? 'status-today' : 
                           test.status === 'completed' ? 'status-completed' : 'status-past';
        const statusText = test.status === 'today' ? 'วันนี้' : 
                          test.status === 'completed' ? 'อัปโหลดแล้ว' : 'ประวัติ';
        
        html += `
          <div class="test-card ${test.status}" onclick="openDetailModal('${test.id}')">
            <div class="test-header">
              <div class="test-id">รหัส ${test.id}</div>
              <div class="test-status ${statusClass}">${statusText}</div>
            </div>
            
            <div class="test-info">
              <div class="info-item">
                <div class="info-label">ชื่อผู้ป่วย</div>
                <div class="info-value">${test.patientName}</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">ประเภทการตรวจ</div>
                <div class="info-value">${test.testType}</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">วันที่</div>
                <div class="info-value">${test.date}</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">เวลา</div>
                <div class="info-value">${test.time} น.</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">ค่าบริการ</div>
                <div class="info-value price-value">${test.price} บาท</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">เจ้าหน้าที่</div>
                <div class="info-value">${test.labStaff}</div>
              </div>
            </div>
            
            <div class="test-actions" onclick="event.stopPropagation()">
              <button class="btn btn-view" onclick="openDetailModal('${test.id}')">
                <i class="fas fa-eye"></i> ดูรายละเอียด
              </button>
              
              ${test.status === 'today' && !test.results ? `
                <button class="btn btn-upload" onclick="openUploadModal('${test.id}')">
                  <i class="fas fa-upload"></i> อัปโหลดผล
                </button>
              ` : test.results ? `
                <button class="btn btn-download" onclick="downloadResult('${test.id}')">
                  <i class="fas fa-download"></i> ดาวน์โหลด
                </button>
              ` : ''}
            </div>
          </div>
        `;
      });
      
      testList.innerHTML = html;
    }

    // Update counts for each tab
    function updateCounts() {
      const todayCount = bloodTests.filter(b => b.status === 'today').length;
      const completedCount = bloodTests.filter(b => b.status === 'completed').length;
      const historyCount = bloodTests.filter(b => b.status === 'history').length;
      
      document.getElementById('todayCount').textContent = todayCount;
      document.getElementById('completedCount').textContent = completedCount;
      document.getElementById('historyCount').textContent = historyCount;
    }

    // Search functionality
    function handleSearch() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const dateFilter = document.getElementById('dateFilter').value;
      
      let filteredTests = bloodTests.filter(test => test.status === currentTab);
      
      if (searchTerm) {
        filteredTests = filteredTests.filter(test => 
          test.id.toLowerCase().includes(searchTerm) ||
          test.patientName.toLowerCase().includes(searchTerm)
        );
      }
      
      if (dateFilter) {
        const filterDate = new Date(dateFilter);
        filteredTests = filteredTests.filter(test => {
          const testDate = parseThaiDate(test.date);
          return testDate.toDateString() === filterDate.toDateString();
        });
      }
      
      renderFilteredTests(filteredTests);
    }

    function handleDateFilter() {
      handleSearch();
    }

    function parseThaiDate(dateStr) {
      const [day, month, year] = dateStr.split('/');
      return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
    }

    function renderFilteredTests(filteredTests) {
      const testList = document.getElementById('testList');
      
      if (filteredTests.length === 0) {
        testList.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">
              <i class="fas fa-search"></i>
            </div>
            <div class="empty-title">ไม่พบรายการที่ค้นหา</div>
            <div class="empty-message">ลองเปลี่ยนคำค้นหาหรือกรองข้อมูลใหม่</div>
          </div>
        `;
        return;
      }

      let html = '';
      filteredTests.forEach(test => {
        const statusClass = test.status === 'today' ? 'status-today' : 
                           test.status === 'completed' ? 'status-completed' : 'status-past';
        const statusText = test.status === 'today' ? 'วันนี้' : 
                          test.status === 'completed' ? 'อัปโหลดแล้ว' : 'ประวัติ';
        
        html += `
          <div class="test-card ${test.status}" onclick="openDetailModal('${test.id}')">
            <div class="test-header">
              <div class="test-id">รหัส ${test.id}</div>
              <div class="test-status ${statusClass}">${statusText}</div>
            </div>
            
            <div class="test-info">
              <div class="info-item">
                <div class="info-label">ชื่อผู้ป่วย</div>
                <div class="info-value">${test.patientName}</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">ประเภทการตรวจ</div>
                <div class="info-value">${test.testType}</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">วันที่</div>
                <div class="info-value">${test.date}</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">เวลา</div>
                <div class="info-value">${test.time} น.</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">ค่าบริการ</div>
                <div class="info-value price-value">${test.price} บาท</div>
              </div>
              
              <div class="info-item">
                <div class="info-label">เจ้าหน้าที่</div>
                <div class="info-value">${test.labStaff}</div>
              </div>
            </div>
            
            <div class="test-actions" onclick="event.stopPropagation()">
              <button class="btn btn-view" onclick="openDetailModal('${test.id}')">
                <i class="fas fa-eye"></i> ดูรายละเอียด
              </button>
              
              ${test.status === 'today' && !test.results ? `
                <button class="btn btn-upload" onclick="openUploadModal('${test.id}')">
                  <i class="fas fa-upload"></i> อัปโหลดผล
                </button>
              ` : test.results ? `
                <button class="btn btn-download" onclick="downloadResult('${test.id}')">
                  <i class="fas fa-download"></i> ดาวน์โหลด
                </button>
              ` : ''}
            </div>
          </div>
        `;
      });
      
      testList.innerHTML = html;
    }

    // Modal functions
    function openDetailModal(testId) {
      const test = bloodTests.find(b => b.id === testId);
      if (!test) return;
      
      currentTestId = testId;
      
      document.getElementById('modalTestId').textContent = test.id;
      document.getElementById('modalPatientName').textContent = test.patientName;
      document.getElementById('modalTestType').textContent = test.testType;
      document.getElementById('modalDate').textContent = test.date;
      document.getElementById('modalTime').textContent = test.time + ' น.';
      document.getElementById('modalPrice').textContent = test.price + ' บาท';
      
      // Show results if available
      const resultsSection = document.getElementById('resultsSection');
      if (test.excelData && test.excelData.length > 0) {
        displayTestResults(test.excelData);
        resultsSection.style.display = 'block';
      } else {
        resultsSection.style.display = 'none';
      }
      
      // Update modal actions based on status
      const modalActions = document.getElementById('modalActions');
      if (test.status === 'today' && !test.results) {
        modalActions.innerHTML = `
          <button class="btn btn-upload" onclick="openUploadModal('${test.id}')">
            <i class="fas fa-upload"></i> อัปโหลดผลตรวจ
          </button>
          <button class="btn btn-view" onclick="closeDetailModal()">
            <i class="fas fa-times"></i> ปิด
          </button>
        `;
      } else if (test.results) {
        modalActions.innerHTML = `
          <button class="btn btn-download" onclick="downloadResult('${test.id}')">
            <i class="fas fa-download"></i> ดาวน์โหลดไฟล์ Excel
          </button>
          <button class="btn btn-view" onclick="closeDetailModal()">
            <i class="fas fa-times"></i> ปิด
          </button>
        `;
      } else {
        modalActions.innerHTML = `
          <button class="btn btn-view" onclick="closeDetailModal()">
            <i class="fas fa-times"></i> ปิด
          </button>
        `;
      }
      
      document.getElementById('detailModal').classList.add('show');
    }

    function displayTestResults(excelData) {
      // Display summary
      const summaryDiv = document.getElementById('resultsSummary');
      const abnormalCount = excelData.filter(item => item.status !== 'ปกติ').length;
      
      summaryDiv.innerHTML = `
        <div class="summary-title">สรุปผลตรวจ</div>
        <div class="summary-content">
          จำนวนรายการตรวจ: ${excelData.length} รายการ<br>
          ผลปกติ: ${excelData.length - abnormalCount} รายการ<br>
          ผลผิดปกติ: ${abnormalCount} รายการ
        </div>
      `;
      
      // Display detailed results table
      const tableContainer = document.getElementById('resultsTableContainer');
      let tableHtml = `
        <table class="results-table">
          <thead>
            <tr>
              <th>รายการตรวจ</th>
              <th>ค่าที่วัดได้</th>
              <th>หน่วย</th>
              <th>ค่าปกติ</th>
              <th>สถานะ</th>
            </tr>
          </thead>
          <tbody>
      `;
      
      excelData.forEach(item => {
        const statusClass = item.status === 'ปกติ' ? 'normal-value' : 'abnormal-value';
        tableHtml += `
          <tr>
            <td>${item.test}</td>
            <td class="${statusClass}">${item.value}</td>
            <td>${item.unit}</td>
            <td>${item.normalRange}</td>
            <td class="${statusClass}">${item.status}</td>
          </tr>
        `;
      });
      
      tableHtml += '</tbody></table>';
      tableContainer.innerHTML = tableHtml;
    }

    function closeDetailModal() {
      document.getElementById('detailModal').classList.remove('show');
      currentTestId = null;
    }

    function openUploadModal(testId) {
      currentTestId = testId;
      selectedFile = null;
      document.getElementById('selectedFile').style.display = 'none';
      document.getElementById('uploadBtn').disabled = true;
      document.getElementById('uploadModal').classList.add('show');
      closeDetailModal();
    }

    function closeUploadModal() {
      document.getElementById('uploadModal').classList.remove('show');
      selectedFile = null;
      currentTestId = null;
    }

    function handleFileSelect(event) {
      const file = event.target.files[0];
      if (!file) return;
      
      // Validate file type
      const allowedTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'];
      if (!allowedTypes.includes(file.type)) {
        showNotification('ประเภทไฟล์ไม่ถูกต้อง กรุณาเลือกไฟล์ Excel (.xlsx, .xls)', 'error');
        return;
      }
      
      // Validate file size (10MB)
      if (file.size > 10 * 1024 * 1024) {
        showNotification('ไฟล์มีขนาดใหญ่เกินไป (สูงสุด 10MB)', 'error');
        return;
      }
      
      selectedFile = file;
      document.getElementById('fileName').textContent = file.name;
      document.getElementById('selectedFile').style.display = 'flex';
      document.getElementById('uploadBtn').disabled = false;
    }

    function removeFile() {
      selectedFile = null;
      document.getElementById('selectedFile').style.display = 'none';
      document.getElementById('uploadBtn').disabled = true;
      document.getElementById('fileInput').value = '';
    }

    function uploadFile() {
      if (!selectedFile || !currentTestId) return;
      
      const uploadBtn = document.getElementById('uploadBtn');
      uploadBtn.classList.add('loading');
      uploadBtn.textContent = 'กำลังประมวลผล...';
      uploadBtn.disabled = true;
      
      // Read Excel file
      const reader = new FileReader();
      reader.onload = function(e) {
        try {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          
          // Get first worksheet
          const firstSheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[firstSheetName];
          
          // Convert to JSON
          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
          
          // Process Excel data (assuming columns: Test Name, Value, Unit, Normal Range, Status)
          const processedData = processExcelData(jsonData);
          
          setTimeout(() => {
            // Update test with results
            const testIndex = bloodTests.findIndex(b => b.id === currentTestId);
            if (testIndex !== -1) {
              bloodTests[testIndex].results = `ผลตรวจจากไฟล์: ${selectedFile.name}`;
              bloodTests[testIndex].excelData = processedData;
              bloodTests[testIndex].status = 'completed';
            }
            
            closeUploadModal();
            
            // Show success modal
            document.getElementById('successMessage').innerHTML = `
              ไฟล์ผลตรวจเลือดสำหรับผู้ป่วยรหัส <strong>${currentTestId}</strong><br>
              ได้ถูกประมวลผลและอัปโหลดเรียบร้อยแล้ว<br>
              พบข้อมูลการตรวจ ${processedData.length} รายการ
            `;
            document.getElementById('successModal').classList.add('show');
            
            // Update display
            updateCounts();
            renderTests();
            
            // Reset upload button
            uploadBtn.classList.remove('loading');
            uploadBtn.textContent = 'อัปโหลด';
            uploadBtn.disabled = false;
          }, 2000);
          
        } catch (error) {
          console.error('Error processing Excel file:', error);
          showNotification('เกิดข้อผิดพลาดในการอ่านไฟล์ Excel กรุณาตรวจสอบรูปแบบไฟล์', 'error');
          
          uploadBtn.classList.remove('loading');
          uploadBtn.textContent = 'อัปโหลด';
          uploadBtn.disabled = false;
        }
      };
      
      reader.readAsArrayBuffer(selectedFile);
    }

    function processExcelData(jsonData) {
      const processedData = [];
      
      // Skip header row (if exists) and process data rows
      for (let i = 1; i < jsonData.length; i++) {
        const row = jsonData[i];
        if (row && row.length >= 4) {
          const testName = row[0] || '';
          const value = row[1] || '';
          const unit = row[2] || '';
          const normalRange = row[3] || '';
          let status = row[4] || 'ปกติ';
          
          // Determine status if not provided
          if (!row[4] && value && normalRange) {
            status = determineStatus(value, normalRange);
          }
          
          if (testName.trim()) {
            processedData.push({
              test: testName.trim(),
              value: value.toString().trim(),
              unit: unit.toString().trim(),
              normalRange: normalRange.toString().trim(),
              status: status.toString().trim()
            });
          }
        }
      }
      
      return processedData;
    }

    function determineStatus(value, normalRange) {
      // Simple logic to determine if value is within normal range
      // This is a basic implementation - in real app, you'd want more sophisticated logic
      const numValue = parseFloat(value);
      if (isNaN(numValue)) return 'ปกติ';
      
      // Try to parse range like "70-100" or "<40" or ">60"
      if (normalRange.includes('-')) {
        const [min, max] = normalRange.split('-').map(x => parseFloat(x.trim()));
        if (!isNaN(min) && !isNaN(max)) {
          if (numValue < min) return 'ต่ำ';
          if (numValue > max) return 'สูง';
          return 'ปกติ';
        }
      } else if (normalRange.startsWith('<')) {
        const maxVal = parseFloat(normalRange.substring(1));
        if (!isNaN(maxVal)) {
          return numValue >= maxVal ? 'สูง' : 'ปกติ';
        }
      } else if (normalRange.startsWith('>')) {
        const minVal = parseFloat(normalRange.substring(1));
        if (!isNaN(minVal)) {
          return numValue <= minVal ? 'ต่ำ' : 'ปกติ';
        }
      }
      
      return 'ปกติ';
    }

    function closeSuccessModal() {
      document.getElementById('successModal').classList.remove('show');
      currentTestId = null;
    }

    function downloadResult(testId) {
      const test = bloodTests.find(b => b.id === testId);
      if (!test || !test.excelData) return;
      
      // Create Excel workbook for download
      const ws = XLSX.utils.json_to_sheet(test.excelData.map(item => ({
        'รายการตรวจ': item.test,
        'ค่าที่วัดได้': item.value,
        'หน่วย': item.unit,
        'ค่าปกติ': item.normalRange,
        'สถานะ': item.status
      })));
      
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'ผลตรวจเลือด');
      
      // Generate filename
      const filename = `ผลตรวจเลือด_${test.patientName}_${test.id}_${new Date().toISOString().split('T')[0]}.xlsx`;
      
      // Download file
      XLSX.writeFile(wb, filename);
      
      showNotification(`กำลังดาวน์โหลดผลตรวจเลือดของ ${test.patientName}`, 'success');
    }

    // Show notification
    function showNotification(message, type = 'success') {
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.innerHTML = `
        <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
        ${message}
      `;
      
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#10B981' : type === 'error' ? '#EF4444' : '#3B82F6'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 2000;
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
        animation: slideIn 0.3s ease-out;
        max-width: 300px;
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-in forwards';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 4000);
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
      initializePage();
    });

    // Add CSS for notification animations
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideIn {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
      
      @keyframes slideOut {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
  </script>
</body>
</html>