<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ข้อมูลการจอง - UPaM</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0; padding: 0; box-sizing: border-box;
    }
    body {
      font-family: 'Inter', sans-serif;
      background: #f8fafc;
      min-height: 100vh;
      font-size: 14px;
    }
    
    /* Header */
    .header {
            background: white;
            padding: 12px 24px;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.477);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
            background: linear-gradient(135deg, #ffff 0%, #183ccbba 100%);
        }

    .logo {
            display: flex;
            align-items: center;
        }

    .logo-img {
            width: 60px;
            height: 60px;
            margin-right: 10px;
        }

    .logo-text {
            line-height: 1;
        }

    .phone-number {
      color: #6B7280;
      font-size: 16px;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .header-right {
      display: flex;
      align-items: center;
      gap: 20px;
    }

    .header-icons {
      display: flex;
      gap: 8px;
    }

    .icon-btn {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: #F3F4F6;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.2s ease;
      color: #6B7280;
    }

    .icon-btn:hover {
      background: #E5E7EB;
      transform: translateY(-1px);
    }

    .notification-btn {
      position: relative;
    }

    .notification-btn::after {
      content: '';
      position: absolute;
      top: 6px;
      right: 6px;
      width: 8px;
      height: 8px;
      background: #EF4444;
      border-radius: 50%;
      border: 2px solid white;
    }

        /* Profile Dropdown Styles */
        .profile-dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background-color: white;
            min-width: 180px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.15);
            z-index: 1000;
            border-radius: 12px;
            overflow: hidden;
            border: 1px solid #e5e7eb;
            margin-top: 8px;
        }

        .dropdown-content.show {
            display: block;
            animation: dropdownFadeIn 0.3s ease-out;
        }

        @keyframes dropdownFadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .dropdown-item {
            color: #374151;
            padding: 12px 20px;
            text-decoration: none;
            display: block;
            transition: all 0.3s ease;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            font-size: 14px;
            cursor: pointer;
        }

        .dropdown-item:hover {
            background-color: #f9fafb;
            color: #1f2937;
        }

        .dropdown-item i {
            margin-right: 10px;
            width: 16px;
            color: #6b7280;
        }

        .dropdown-item.logout {
            border-top: 1px solid #e5e7eb;
            color: #dc2626;
        }

        .dropdown-item.logout:hover {
            background-color: #fef2f2;
            color: #dc2626;
        }

        .dropdown-item.logout i {
            color: #dc2626;
        }
    /* Container */
    .container {
      max-width: 900px;
      margin: 40px auto;
      padding: 0 20px;
    }
    
    .page-title {
      text-align: center;
      font-size: 48px;
      color: #3B82F6;
      font-weight: 600;
      margin-bottom: 40px;
    }

    /* Status Badge */
    .status-badge {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 600;
      margin-bottom: 20px;
    }

    .status-badge.confirmed {
      background: #DCFCE7;
      color: #166534;
      border: 1px solid #BBF7D0;
    }

    .status-badge.cancelled {
      background: #FEE2E2;
      color: #991B1B;
      border: 1px solid #FECACA;
    }

    .status-badge.rescheduled {
      background: #FEF3C7;
      color: #92400E;
      border: 1px solid #FDE68A;
    }

    /* Appointment Card */
    .appointment-card {
      background: white;
      border: 2px solid #3B82F6;
      border-radius: 20px;
      padding: 40px;
      margin-bottom: 30px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
      position: relative;
      overflow: hidden;
    }

    .appointment-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 5px;
      background: linear-gradient(90deg, #3B82F6, #10B981, #F59E0B);
    }

    .appointment-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 30px 40px;
      margin-bottom: 30px;
    }

    .appointment-item {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .appointment-label {
      font-size: 16px;
      font-weight: 600;
      color: #374151;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .appointment-value {
      font-size: 18px;
      color: #1F2937;
      font-weight: 500;
    }

    .price-section {
      grid-column: 1 / -1;
      border-top: 2px solid #E5E7EB;
      padding-top: 25px;
      margin-top: 20px;
      text-align: center;
    }

    .price-label {
      font-size: 18px;
      font-weight: 600;
      color: #374151;
      margin-bottom: 10px;
    }

    .price-value {
      font-size: 32px;
      font-weight: 700;
      color: #EF4444;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }

    /* Action Buttons */
    .action-buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-bottom: 40px;
    }

    .btn {
      padding: 15px 30px;
      border: none;
      border-radius: 12px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 10px;
      min-width: 160px;
      justify-content: center;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .btn-cancel {
      background: linear-gradient(135deg, #EF4444, #DC2626);
      color: white;
      box-shadow: 0 4px 15px rgba(239, 68, 68, 0.4);
    }

    .btn-cancel:hover {
      background: linear-gradient(135deg, #DC2626, #B91C1C);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(239, 68, 68, 0.6);
    }

    .btn-reschedule {
      background: linear-gradient(135deg, #F59E0B, #D97706);
      color: white;
      box-shadow: 0 4px 15px rgba(245, 158, 11, 0.4);
    }

    .btn-reschedule:hover {
      background: linear-gradient(135deg, #D97706, #B45309);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(245, 158, 11, 0.6);
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
      box-shadow: none !important;
    }

    /* Back Button */
    .btn-back {
      background: none;
      border: none;
      color: #6B7280;
      font-size: 16px;
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      transition: all 0.2s ease;
      margin-top: 20px;
    }

    .btn-back:hover {
      color: #374151;
      transform: translateX(-3px);
    }

    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.6);
      z-index: 1000;
      justify-content: center;
      align-items: center;
      backdrop-filter: blur(5px);
    }

    .modal.show {
      display: flex;
    }

    .modal-content {
      background: white;
      border-radius: 20px;
      padding: 40px;
      max-width: 500px;
      width: 90%;
      text-align: center;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      position: relative;
      animation: modalAppear 0.3s ease-out;
    }

    @keyframes modalAppear {
      from {
        opacity: 0;
        transform: scale(0.8) translateY(-50px);
      }
      to {
        opacity: 1;
        transform: scale(1) translateY(0);
      }
    }

    .modal-icon {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 20px;
      color: white;
      font-size: 36px;
    }

    .modal-icon.cancel {
      background: linear-gradient(135deg, #EF4444, #DC2626);
    }

    .modal-icon.reschedule {
      background: linear-gradient(135deg, #F59E0B, #D97706);
    }

    .modal-title {
      font-size: 24px;
      font-weight: 600;
      color: #1F2937;
      margin-bottom: 15px;
    }

    .modal-message {
      font-size: 16px;
      color: #6B7280;
      margin-bottom: 30px;
      line-height: 1.5;
    }

    .reason-input {
      width: 100%;
      min-height: 120px;
      padding: 15px;
      border: 2px solid #E5E7EB;
      border-radius: 12px;
      font-size: 14px;
      resize: vertical;
      font-family: inherit;
      margin-bottom: 30px;
      transition: all 0.2s ease;
    }

    .reason-input:focus {
      outline: none;
      border-color: #3B82F6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .reason-input::placeholder {
      color: #9CA3AF;
    }

    .modal-buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
    }

    .btn-modal {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      min-width: 100px;
    }

    .btn-modal-primary {
      background: #EF4444;
      color: white;
    }

    .btn-modal-primary:hover {
      background: #DC2626;
    }

    .btn-modal-primary.reschedule {
      background: #F59E0B;
    }

    .btn-modal-primary.reschedule:hover {
      background: #D97706;
    }

    .btn-modal-secondary {
      background: #F3F4F6;
      color: #374151;
      border: 1px solid #E5E7EB;
    }

    .btn-modal-secondary:hover {
      background: #E5E7EB;
    }

    /* Success Modal */
    .success-modal .modal-icon {
      background: linear-gradient(135deg, #10B981, #059669);
    }

    .success-modal .modal-title {
      color: #065F46;
    }

    .success-modal .modal-message {
      color: #047857;
    }

    /* Loading State */
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }

    .btn.loading::after {
      content: "";
      width: 16px;
      height: 16px;
      margin-left: 8px;
      border: 2px solid transparent;
      border-top: 2px solid currentColor;
      border-radius: 50%;
      display: inline-block;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Additional Info Section */
    .additional-info {
      background: #F8FAFC;
      border-radius: 16px;
      padding: 25px;
      margin-bottom: 30px;
      border-left: 5px solid #3B82F6;
    }

    .info-title {
      font-size: 18px;
      font-weight: 600;
      color: #1F2937;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .info-text {
      color: #6B7280;
      line-height: 1.6;
      font-size: 14px;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .container {
        padding: 0 15px;
      }

      .page-title {
        font-size: 32px;
      }

      .appointment-card {
        padding: 25px;
      }

      .appointment-grid {
        grid-template-columns: 1fr;
        gap: 20px;
      }

      .action-buttons {
        flex-direction: column;
        align-items: center;
      }

      .btn {
        width: 100%;
        max-width: 300px;
      }

      .modal-content {
        padding: 25px;
        margin: 20px;
      }

      .header-right .phone-number {
        display: none;
      }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <div class="header">
        <div class="logo">
            <img src=".\img\UPaMLOGO.png" class="logo-img"> 
      <div class="phone-number">
        <i class="fas fa-phone"></i>
        1234
      </div>
    </div>
    
    <div class="header-right">
            <div class="header-right">
            <div class="header-icons">
                <button class="icon-btn" title="ค้นหา">
                <i class="fas fa-search"></i>
                </button>

                <button class="icon-btn notification-btn" title="การแจ้งเตือน">
                <i class="fas fa-bell"></i>
                </button>

                <!-- ปุ่มโปรไฟล์ -->
                <div class="profile-dropdown">
                <button class="icon-btn" id="profileBtn" title="บัญชีผู้ใช้">
                    <i class="fas fa-user"></i>
                </button>
                <div class="dropdown-content" id="profileDropdown">
                    <a href="/userhistory" class="dropdown-item">
                    <i class="fas fa-id-card"></i> โปรไฟล์
                    </a>
                    <button class="dropdown-item logout" onclick="logout(event)">
                    <i class="fas fa-sign-out-alt"></i> ออกจากระบบ
                    </button>
                </div>
                </div>
            </div>
        </div>
        
    </div>

  <!-- Main Content -->
  <div class="container">
    <h1 class="page-title">ข้อมูลการจอง</h1>

    <!-- Status Badge -->
    <div class="text-center">
      <div class="status-badge confirmed" id="statusBadge">
        <i class="fas fa-check-circle"></i>
        ยืนยันการนัดหมายแล้ว
      </div>
    </div>

    <!-- Appointment Details Card -->
    <div id="appointmentCard" class="appointment-card">
      <div class="appointment-grid">
        <div class="appointment-item">
          <div class="appointment-label">
            <i class="fas fa-hashtag"></i>
            รหัสการจอง:
          </div>
          <div class="appointment-value" id="bookingId">00010</div>
        </div>
        
        <div class="appointment-item">
          <div class="appointment-label">
            <i class="fas fa-user"></i>
            ชื่อ-นามสกุล
          </div>
          <div class="appointment-value" id="patientName">-</div>
        </div>
        
        <div class="appointment-item">
          <div class="appointment-label">
            <i class="fas fa-stethoscope"></i>
            ปัญหาสุขภาพ:
          </div>
          <div class="appointment-value" id="healthProblem">-</div>
        </div>
        
        <div class="appointment-item">
          <div class="appointment-label">
            <i class="fas fa-clock"></i>
            เวลา:
          </div>
          <div class="appointment-value" id="appointmentTime">-</div>
        </div>
        
        <div class="appointment-item">
          <div class="appointment-label">
            <i class="fas fa-hospital"></i>
            บริการ:
          </div>
          <div class="appointment-value" id="serviceName">-</div>
        </div>
        
        <div class="appointment-item">
          <div class="appointment-label">
            <i class="fas fa-calendar-alt"></i>
            วันที่:
          </div>
          <div class="appointment-value" id="appointmentDate">-</div>
        </div>
        
        <div class="price-section">
          <div class="price-label">ค่าบริการที่ต้องชำระ:</div>
          <div class="price-value" id="servicePrice">-</div>
        </div>
      </div>
    </div>

    <!-- Additional Info -->
    <div class="additional-info">
      <div class="info-title">
        <i class="fas fa-info-circle"></i>
        ข้อมูลสำคัญ
      </div>
      <div class="info-text">
        การจองคิวองค์นี้ได้ถูกส่งให้เจ้าหน้าที่เรียบร้อยแล้ว 
        โปรดรอการยืนยันจากเจ้าหน้าที่ และมาตามเวลาที่นัดหมาย 
        หากต้องการยกเลิกหรือเลื่อนการนัดหมาย กรุณาแจ้งล่วงหน้าอย่างน้อย 24 ชั่วโมง
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="action-buttons">
      <button class="btn btn-cancel" onclick="openCancelModal()">
        <i class="fas fa-times"></i>
        ยกเลิกการจอง
      </button>
      <button class="btn btn-reschedule" onclick="openRescheduleModal()">
        <i class="fas fa-edit"></i>
        เลื่อนการจอง
      </button>
    </div>

    <div style="text-align: center;">
      <button class="btn-back" onclick="goBack()">
        <i class="fas fa-chevron-left"></i>
        ย้อนกลับ
      </button>
    </div>
  </div>

  <!-- Cancel Modal -->
  <div class="modal" id="cancelModal">
    <div class="modal-content">
      <div class="modal-icon cancel">
        <i class="fas fa-times"></i>
      </div>
      <h3 class="modal-title">ยกเลิกการนัดหมาย</h3>
      <p class="modal-message">
        กรุณาระบุเหตุผลในการยกเลิกการนัดหมาย<br>
        เพื่อช่วยให้เราปรับปรุงบริการได้ดียิ่งขึ้น
      </p>
      <textarea 
        class="reason-input" 
        id="cancelReason" 
        placeholder="กรุณาระบุเหตุผลในการยกเลิก... (เช่น มีธุระฉุกเฉิน, เปลี่ยนแปลงแผน, ไม่สะดวก)"
        maxlength="500">
      </textarea>
      <div class="modal-buttons">
        <button class="btn-modal btn-modal-primary" onclick="confirmCancel()">
          ยืนยันยกเลิก
        </button>
        <button class="btn-modal btn-modal-secondary" onclick="closeModal()">
          ปิด
        </button>
      </div>
    </div>
  </div>

  <!-- Reschedule Modal -->
  <div class="modal" id="rescheduleModal">
    <div class="modal-content">
      <div class="modal-icon reschedule">
        <i class="fas fa-edit"></i>
      </div>
      <h3 class="modal-title">เลื่อนการนัดหมาย</h3>
      <p class="modal-message">
        กรุณาระบุเหตุผลในการเลื่อนการนัดหมาย<br>
        ระบบจะนำคุณไปยังหน้าจองคิวใหม่หลังจากนี้
      </p>
      <textarea 
        class="reason-input" 
        id="rescheduleReason" 
        placeholder="กรุณาระบุเหตุผลในการเลื่อน... (เช่น มีงานกะทันหัน, ไม่สะดวก, เปลี่ยนแผน)"
        maxlength="500">
      </textarea>
      <div class="modal-buttons">
        <button class="btn-modal btn-modal-primary reschedule" onclick="confirmReschedule()">
          ยืนยันเลื่อน
        </button>
        <button class="btn-modal btn-modal-secondary" onclick="closeModal()">
          ปิด
        </button>
      </div>
    </div>
  </div>

  <!-- Success Modal -->
  <div class="modal success-modal" id="successModal">
    <div class="modal-content">
      <div class="modal-icon">
        <i class="fas fa-check"></i>
      </div>
      <h3 class="modal-title" id="successTitle">ดำเนินการสำเร็จ!</h3>
      <p class="modal-message" id="successMessage">
        การยกเลิกการนัดหมายของคุณเสร็จสิ้นแล้ว<br>
        ขอบคุณสำหรับการแจ้งให้ทราบ
      </p>
      <div class="modal-buttons">
        <!-- <button class="btn-modal btn-modal-primary" onclick="goToAppointments()">
          ดูการนัดหมายทั้งหมด
        </button> -->
        <button class="btn-modal btn-modal-secondary" onclick="closeModal()">
          ปิด
        </button>
      </div>
    </div>
  </div>

  <script>
    let currentAppointment = null;
    const profileBtn = document.getElementById('profileBtn');
    const profileDropdown = document.getElementById('profileDropdown');

        profileBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            profileDropdown.classList.toggle('show');
        });

        // ปิด dropdown เมื่อคลิกข้างนอก
        window.addEventListener('click', function() {
            if (profileDropdown.classList.contains('show')) {
                profileDropdown.classList.remove('show');
            }
        });

        // ป้องกันการปิด dropdown เมื่อคลิกข้างใน dropdown
        profileDropdown.addEventListener('click', function(e) {
            e.stopPropagation();
        });

        // ฟังก์ชัน logout
        document.querySelector('.logout').addEventListener('click', async function(event) {
        if (!confirm('คุณต้องการออกจากระบบหรือไม่?')) return;

        const btn = event.currentTarget;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> กำลังออกจากระบบ...';

        try {
            const res = await fetch('/logout', { method: 'GET' });
            if (res.ok) {
            window.location.href = '/login';
            } else {
            alert('ออกจากระบบไม่สำเร็จ');
            btn.innerHTML = 'ออกจากระบบ';
            }
        } catch (err) {
            console.error(err);
            alert('เกิดข้อผิดพลาด');
            btn.innerHTML = 'ออกจากระบบ';
        }
        });
    // ดึง appointment ล่าสุด ทั้ง phy และ blood
    async function fetchAppointment() {
      try {
        console.log('🔍 Fetching appointment...');
        const res = await fetch('/api/my-appointment');
        const data = await res.json();
        
        console.log('📊 API Response:', data);
        
        if (data.success && data.appointment) {
          currentAppointment = mapAppointment(data.appointment);
          updateAppointmentDisplay();
          console.log('✅ Appointment loaded:', currentAppointment);
        } else {
          currentAppointment = null;
          document.getElementById('appointmentCard').style.display = 'none';
          console.log('❌ No appointment found:', data.message);
          
          // แสดง message ให้ user ทราบ
          const appointmentCard = document.getElementById('appointmentCard');
          appointmentCard.innerHTML = `
            <div style="text-align: center; padding: 20px; color: #666;">
              <i class="fas fa-calendar-times" style="font-size: 48px; margin-bottom: 10px;"></i>
              <p>${data.message}</p>
            </div>
          `;
          appointmentCard.style.display = 'block';
        }
      } catch (error) {
        console.error('❌ Fetch error:', error);
        document.getElementById('appointmentCard').style.display = 'none';
      }
    }

    // Mapping ข้อมูลจาก API -> ใช้ render
    function mapAppointment(appointment) {
      console.log('🔄 Mapping appointment:', appointment);
      
      return {
        id: appointment.id,
        patientName: appointment.patientName || appointment.fullname || '-',
        problem: appointment.problem || '-',
        time: appointment.time_slot || appointment.time || '-',
        service: appointment.service || 'ไม่ระบุ',
        date: appointment.appointment_date || appointment.date || '-',
        total_price: appointment.total_price || '0',
        status: appointment.status || 'จองแล้ว',
        type: appointment.service === 'ตรวจเลือด' ? 'blood' : 'phy' // เพิ่ม type
      };
    }
    
    function updateAppointmentDisplay() {
      if (!currentAppointment) return;

      document.getElementById('appointmentCard').style.display = 'block';
      document.getElementById('bookingId').textContent = currentAppointment.id;
      document.getElementById('patientName').textContent = currentAppointment.patientName;
      document.getElementById('healthProblem').textContent = currentAppointment.problem;
      document.getElementById('appointmentTime').textContent = currentAppointment.time;
      document.getElementById('serviceName').textContent = currentAppointment.service;
      document.getElementById('appointmentDate').textContent = currentAppointment.date;
      document.getElementById('servicePrice').textContent = currentAppointment.total_price !== '-' 
        ? `${parseFloat(currentAppointment.total_price).toLocaleString()} บาท`
        : '-';

      updateStatusBadge(currentAppointment.status);
    }

    function updateStatusBadge(status) {
      const badge = document.getElementById('statusBadge');
      const actionButtons = document.querySelector('.action-buttons');
      badge.className = 'status-badge';

      switch (status) {
        case 'จองแล้ว':
        case 'confirmed':
          badge.classList.add('confirmed');
          badge.innerHTML = '<i class="fas fa-check-circle"></i> ยืนยันการนัดหมายแล้ว';
          actionButtons.style.display = 'flex';
          break;
        case 'ยกเลิกแล้ว':
          badge.classList.add('cancelled');
          badge.innerHTML = '<i class="fas fa-times-circle"></i> ยกเลิกการนัดหมายแล้ว';
          actionButtons.style.display = 'none';
          break;
        case 'เลื่อนแล้ว':
          badge.classList.add('rescheduled');
          badge.innerHTML = '<i class="fas fa-clock"></i> เลื่อนการนัดหมายแล้ว';
          actionButtons.style.display = 'none';
          break;
      }
    }

    function openCancelModal() {
      document.getElementById('cancelModal').classList.add('show');
      document.getElementById('cancelReason').focus();
    }

    function openRescheduleModal() {
      document.getElementById('rescheduleModal').classList.add('show');
      document.getElementById('rescheduleReason').focus();
    }

    function closeModal() {
      document.querySelectorAll('.modal').forEach(modal => modal.classList.remove('show'));
      document.getElementById('cancelReason').value = '';
      document.getElementById('rescheduleReason').value = '';
    }

    function goBack() {
      if (confirm('ต้องการกลับไปหน้าก่อนหน้านี้?')) {
        window.history.back();
      }
    }

    // function goToAppointments() {
    //   closeModal();
    //   window.location.href = '/BookingCard';
    // }

    // เรียกใช้ตอนโหลดหน้า
    document.addEventListener('DOMContentLoaded', () => {
      console.log('🚀 Page loaded, fetching appointment...');
      fetchAppointment();
    });

    // ยกเลิกการนัดหมายผ่าน API
    async function confirmCancel() {
      const reason = document.getElementById('cancelReason').value.trim();
      if (!reason) return alert('กรุณาระบุเหตุผลในการยกเลิก');

      try {
        console.log('🚫 Cancelling appointment:', currentAppointment);
        
        const res = await fetch(`/api/my-appointment/cancel`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            appointmentId: currentAppointment.id, 
            reason: reason,
            type: currentAppointment.type // ส่ง type ไปด้วย
          })
        });
        
        const data = await res.json();
        console.log('📊 Cancel response:', data);
        
        if (data.success) {
          currentAppointment.status = 'ยกเลิกแล้ว';
          updateStatusBadge('ยกเลิกแล้ว');
          closeModal();
          alert('ยกเลิกการนัดหมายสำเร็จ');
        } else {
          alert(data.message || 'เกิดข้อผิดพลาดในการยกเลิก');
        }
      } catch (err) {
        console.error('❌ Cancel error:', err);
        alert('เกิดข้อผิดพลาดในการยกเลิก');
      }
    }

    // เลื่อนการนัดหมายผ่าน API
    async function confirmReschedule() {
      const reason = document.getElementById('rescheduleReason').value.trim();
      if (!reason) return alert('กรุณาระบุเหตุผลในการเลื่อน');

      const newDate = prompt('ระบุวันที่ใหม่ (dd/mm/yyyy):', currentAppointment.date);
      const newTime = prompt('ระบุเวลาที่ใหม่ (HH:MM-HH:MM):', currentAppointment.time);
      if (!newDate || !newTime) return alert('กรุณากรอกวันที่และเวลาใหม่');

      try {
        console.log('📅 Rescheduling appointment:', currentAppointment);
        
        const res = await fetch(`/api/my-appointment/reschedule`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            appointmentId: currentAppointment.id,
            new_date: newDate,
            new_time: newTime,
            reason: reason,
            type: currentAppointment.type // ส่ง type ไปด้วย
          })
        });
        
        const data = await res.json();
        console.log('📊 Reschedule response:', data);

        if (data.success) {
          currentAppointment.status = 'เลื่อนแล้ว';
          currentAppointment.date = newDate;
          currentAppointment.time = newTime;
          updateAppointmentDisplay();
          closeModal();

          document.getElementById('successTitle').textContent = 'เลื่อนสำเร็จ!';
          document.getElementById('successMessage').innerHTML = 'เลื่อนการนัดหมายเสร็จสิ้นแล้ว';
          document.getElementById('successModal').classList.add('show');
        } else {
          alert(data.message || 'เกิดข้อผิดพลาดในการเลื่อน');
        }
      } catch (err) {
        console.error('❌ Reschedule error:', err);
        alert('เกิดข้อผิดพลาดในการเลื่อน');
      }
    }

    // เรียก fetch ตอนโหลดหน้า
    document.addEventListener('DOMContentLoaded', () => {
      initializePage();
      fetchAppointment();
    });

    // ฟังก์ชัน logout
    function logout() {
      if (confirm('คุณต้องการออกจากระบบหรือไม่?')) {
        const logoutBtn = event.target;
        logoutBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> กำลังออกจากระบบ...';
        setTimeout(() => {
          alert('ออกจากระบบเรียบร้อยแล้ว');
          window.location.href = "/Login";
        }, 1500);
      }
    }

    // ฟังก์ชันจองบริการ
    function bookService(service) {
      const card = event.currentTarget;
      card.style.transform = 'scale(0.95)';

      setTimeout(() => {
        card.style.transform = '';
        if (service === 'physiotherapy') {
          window.location.href = "/Bookingphy";
        } else if (service === 'blood-test') {
          window.location.href = "/Bookingblood";
        }
      }, 150);
    }

    // Initialize page
    function initializePage() {
      updateAppointmentDisplay();
      setupModalEvents();
    }

    // Setup modal events
    function setupModalEvents() {
      document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', function(e) {
          if (e.target === this) {
            closeModal();
          }
        });
      });

      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          closeModal();

        }

      
      });
    }

    // Format date (optional)
    function formatThaiDate(dateString) {
      const months = [
        'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
        'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'
      ];
      const [day, month, year] = dateString.split('/');
      const monthName = months[parseInt(month) - 1];
      return `${parseInt(day)} ${monthName} ${year}`;
    }

    // Print appointment details
    function printAppointment() {
      window.print();
    }
    
    // เลื่อนหรือยกเลิก appointment (admin + user reason)
    async function manageAppointment(action) {
      if (!currentAppointment) return alert('ไม่พบการจอง');

      const reason = prompt('กรุณาระบุเหตุผล:');
      if (!reason) return alert('กรุณาระบุเหตุผล');

      let payload = {
        appointmentId: currentAppointment.id,
        type: currentAppointment.type,
        action,
        reason
      };

      if (action === 'reschedule') {
        const newDate = prompt('ระบุวันที่ใหม่ (dd/mm/yyyy):', currentAppointment.date);
        const newTime = prompt('ระบุเวลาที่ใหม่ (HH:MM-HH:MM):', currentAppointment.time);
        if (!newDate || !newTime) return alert('กรุณากรอกวันที่และเวลาใหม่');
        payload.new_date = newDate;
        payload.new_time = newTime;
      }

      try {
        const res = await fetch('/api/admin/appointments/manage', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        const data = await res.json();
        console.log('📊 Manage response:', data);

        if (data.success) {
          if (action === 'cancel') currentAppointment.status = 'ยกเลิกแล้ว';
          if (action === 'reschedule') {
            currentAppointment.status = 'เลื่อนแล้ว';
            currentAppointment.date = payload.new_date;
            currentAppointment.time = payload.new_time;
          }
          updateAppointmentDisplay();
          alert(data.message || 'ดำเนินการเรียบร้อย');
        } else {
          alert(data.message || 'เกิดข้อผิดพลาด');
        }
      } catch (err) {
        console.error('❌ Manage appointment error:', err);
        alert('เกิดข้อผิดพลาดในการดำเนินการ');
      }
    }

  </script>

</body>
</html>